/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

export type AuthenticatorProvider =
    | "vectis"
    | {
          custom: string;
      };
export type AuthenticatorType =
    | ("cosmos_e_o_a" | "ethereum_e_o_a" | "webauthn")
    | {
          other: string;
      };
export type Binary = string;
export type Uint128 = string;
export type PluginPermissions = "exec" | "pre_tx_check" | "post_tx_hook";
export type PluginSource =
    | {
          vectis_registry: number;
      }
    | {
          code_id: [number, string];
      };
export interface InstantiateMsg {
    msg: ProxyInstantiateMsg;
    [k: string]: unknown;
}
export interface ProxyInstantiateMsg {
    create_wallet_msg: CreateWalletMsg;
}
export interface CreateWalletMsg {
    controller: Entity;
    initial_data: [Binary, Binary][];
    label: string;
    plugins: PluginInstallParams[];
    proxy_initial_funds: Coin[];
    relayers: string[];
}
export interface Entity {
    auth: Authenticator;
    data: Binary;
    nonce: number;
}
export interface Authenticator {
    provider: AuthenticatorProvider;
    ty: AuthenticatorType;
}
export interface PluginInstallParams {
    funds: Coin[];
    instantiate_msg: Binary;
    label: string;
    plugin_params: PluginParams;
    src: PluginSource;
}
export interface Coin {
    amount: Uint128;
    denom: string;
    [k: string]: unknown;
}
export interface PluginParams {
    permission: PluginPermissions;
}
export type ExecuteMsg = WalletTraitExecMsg | ExecMsg;
export type WalletTraitExecMsg =
    | {
          auth_exec: {
              transaction: RelayTransaction;
              [k: string]: unknown;
          };
      }
    | {
          update_data: {
              data: [Binary, Binary | null][];
              [k: string]: unknown;
          };
      };
export type ExecMsg = string;
export interface RelayTransaction {
    message: Binary;
    signature: Binary;
}
export type QueryMsg = WalletTraitQueryMsg | QueryMsg1;
export type WalletTraitQueryMsg =
    | {
          info: {
              [k: string]: unknown;
          };
      }
    | {
          sub_accounts: {
              [k: string]: unknown;
          };
      }
    | {
          data: {
              key: Binary;
              [k: string]: unknown;
          };
      };
export type QueryMsg1 = string;
export type NullableBinary = Binary | null;
export type Addr = string;
export interface WalletInfo {
    code_id: number;
    controller: Entity;
    created_at: number;
    deployer: Addr;
    label: string;
    relayers: Addr[];
    version: ContractVersion;
}
export interface ContractVersion {
    contract: string;
    version: string;
}
export type ArrayOfString = string[];
