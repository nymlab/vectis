/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

export type AuthenticatorProvider =
    | "vectis"
    | {
          custom: string;
      };
export type AuthenticatorType =
    | ("cosmos_e_o_a" | "ethereum_e_o_a" | "webauthn")
    | {
          other: string;
      };
export type Binary = string;
export type Uint128 = string;
export type PluginPermission = "exec" | "pre_tx_check" | "post_tx_hook";
export type PluginSource = {
    vectis_registry: [number, string | null];
};
export interface InstantiateMsg {
    msg: ProxyCreateMsg;
    [k: string]: unknown;
}
export interface ProxyCreateMsg {
    create_wallet_msg: CreateWalletMsg;
}
export interface CreateWalletMsg {
    chains?: [string, string][] | null;
    code_id?: number | null;
    controller: Entity;
    initial_data: [Binary, Binary][];
    plugins: PluginInstallParams[];
    proxy_initial_funds: Coin[];
    relayers: string[];
    vid: string;
}
export interface Entity {
    auth: Authenticator;
    data: Binary;
    nonce: number;
}
export interface Authenticator {
    provider: AuthenticatorProvider;
    ty: AuthenticatorType;
}
export interface PluginInstallParams {
    funds: Coin[];
    instantiate_msg: Binary;
    label: string;
    permission: PluginPermission;
    src: PluginSource;
}
export interface Coin {
    amount: Uint128;
    denom: string;
    [k: string]: unknown;
}
export type ExecuteMsg = WalletTraitExecMsg | WalletPluginTraitExecMsg | ExecMsg;
export type WalletTraitExecMsg =
    | {
          controller_rotation: {
              new_controller: Entity;
              [k: string]: unknown;
          };
      }
    | {
          auth_exec: {
              transaction: RelayTransaction;
              [k: string]: unknown;
          };
      }
    | {
          update_data: {
              data: [Binary, Binary | null][];
              [k: string]: unknown;
          };
      };
export type WalletPluginTraitExecMsg =
    | {
          plugin_execute: {
              msg: CosmosMsgForEmpty[];
              [k: string]: unknown;
          };
      }
    | {
          install_plugins: {
              install: PluginInstallParams[];
              [k: string]: unknown;
          };
      }
    | {
          update_plugins: {
              migrate: PluginMigrateParams[];
              [k: string]: unknown;
          };
      }
    | {
          remove_plugins: {
              plugin_addrs: string[];
              [k: string]: unknown;
          };
      };
export type CosmosMsgForEmpty =
    | {
          bank: BankMsg;
      }
    | {
          custom: Empty;
      }
    | {
          staking: StakingMsg;
      }
    | {
          distribution: DistributionMsg;
      }
    | {
          stargate: {
              type_url: string;
              value: Binary;
              [k: string]: unknown;
          };
      }
    | {
          ibc: IbcMsg;
      }
    | {
          wasm: WasmMsg;
      }
    | {
          gov: GovMsg;
      };
export type BankMsg =
    | {
          send: {
              amount: Coin[];
              to_address: string;
              [k: string]: unknown;
          };
      }
    | {
          burn: {
              amount: Coin[];
              [k: string]: unknown;
          };
      };
export type StakingMsg =
    | {
          delegate: {
              amount: Coin;
              validator: string;
              [k: string]: unknown;
          };
      }
    | {
          undelegate: {
              amount: Coin;
              validator: string;
              [k: string]: unknown;
          };
      }
    | {
          redelegate: {
              amount: Coin;
              dst_validator: string;
              src_validator: string;
              [k: string]: unknown;
          };
      };
export type DistributionMsg =
    | {
          set_withdraw_address: {
              address: string;
              [k: string]: unknown;
          };
      }
    | {
          withdraw_delegator_reward: {
              validator: string;
              [k: string]: unknown;
          };
      };
export type IbcMsg =
    | {
          transfer: {
              amount: Coin;
              channel_id: string;
              timeout: IbcTimeout;
              to_address: string;
              [k: string]: unknown;
          };
      }
    | {
          send_packet: {
              channel_id: string;
              data: Binary;
              timeout: IbcTimeout;
              [k: string]: unknown;
          };
      }
    | {
          close_channel: {
              channel_id: string;
              [k: string]: unknown;
          };
      };
export type Timestamp = Uint64;
export type Uint64 = string;
export type WasmMsg =
    | {
          execute: {
              contract_addr: string;
              funds: Coin[];
              msg: Binary;
              [k: string]: unknown;
          };
      }
    | {
          instantiate: {
              admin?: string | null;
              code_id: number;
              funds: Coin[];
              label: string;
              msg: Binary;
              [k: string]: unknown;
          };
      }
    | {
          instantiate2: {
              admin?: string | null;
              code_id: number;
              funds: Coin[];
              label: string;
              msg: Binary;
              salt: Binary;
              [k: string]: unknown;
          };
      }
    | {
          migrate: {
              contract_addr: string;
              msg: Binary;
              new_code_id: number;
              [k: string]: unknown;
          };
      }
    | {
          update_admin: {
              admin: string;
              contract_addr: string;
              [k: string]: unknown;
          };
      }
    | {
          clear_admin: {
              contract_addr: string;
              [k: string]: unknown;
          };
      };
export type GovMsg =
    | {
          vote: {
              proposal_id: number;
              vote: VoteOption;
              [k: string]: unknown;
          };
      }
    | {
          vote_weighted: {
              options: WeightedVoteOption[];
              proposal_id: number;
              [k: string]: unknown;
          };
      };
export type VoteOption = "yes" | "no" | "abstain" | "no_with_veto";
export type Decimal = string;
export type ExecMsg = string;
export interface RelayTransaction {
    message: Binary;
    signature: Binary;
}
export interface Empty {
    [k: string]: unknown;
}
export interface IbcTimeout {
    block?: IbcTimeoutBlock | null;
    timestamp?: Timestamp | null;
    [k: string]: unknown;
}
export interface IbcTimeoutBlock {
    height: number;
    revision: number;
    [k: string]: unknown;
}
export interface WeightedVoteOption {
    option: VoteOption;
    weight: Decimal;
    [k: string]: unknown;
}
export interface PluginMigrateParams {
    funds: Coin[];
    migration_msg: Binary;
    plugin_addr: string;
    plugin_permission: PluginPermission;
    target_src: PluginSource;
}
export type QueryMsg = WalletTraitQueryMsg | WalletPluginTraitQueryMsg | QueryMsg1;
export type WalletTraitQueryMsg =
    | {
          info: {
              [k: string]: unknown;
          };
      }
    | {
          data: {
              key: Binary;
              [k: string]: unknown;
          };
      };
export type WalletPluginTraitQueryMsg = {
    plugins: {
        [k: string]: unknown;
    };
};
export type QueryMsg1 = string;
export type NullableBinary = Binary | null;
export type Addr = string;
export interface WalletInfo {
    addresses: WalletAddrs[];
    code_id: number;
    controller: Entity;
    created_at: number;
    deployer: Addr;
    policy?: Binary | null;
    relayers: Addr[];
    version: ContractVersion;
    vid: string;
}
export interface WalletAddrs {
    addr?: string | null;
    chain_id: string;
}
export interface ContractVersion {
    contract: string;
    version: string;
}
export interface PluginListResponse {
    exec: [string, PluginInfo][];
    post_tx_hooks: [string, PluginInfo][];
    pre_tx: [string, PluginInfo][];
}
export interface PluginInfo {
    permission: PluginPermission;
    src: PluginSource;
    version: string;
}
