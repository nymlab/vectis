/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {
    AuthenticatorProvider,
    AuthenticatorType,
    Binary,
    Uint128,
    PluginPermissions,
    PluginSource,
    InstantiateMsg,
    ProxyCreateMsg,
    CreateWalletMsg,
    Entity,
    Authenticator,
    PluginInstallParams,
    Coin,
    PluginParams,
    ExecuteMsg,
    WalletTraitExecMsg,
    ExecMsg,
    RelayTransaction,
    QueryMsg,
    WalletTraitQueryMsg,
    QueryMsg1,
    NullableBinary,
    Addr,
    WalletInfo,
    ContractVersion,
} from "./Proxy.types";
export interface ProxyReadOnlyInterface {
    contractAddress: string;
    info: () => Promise<WalletInfo>;
    data: ({ key }: { key: Binary }) => Promise<NullableBinary>;
}
export class ProxyQueryClient implements ProxyReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;

    constructor(client: CosmWasmClient, contractAddress: string) {
        this.client = client;
        this.contractAddress = contractAddress;
        this.info = this.info.bind(this);
        this.data = this.data.bind(this);
    }

    info = async (): Promise<WalletInfo> => {
        return this.client.queryContractSmart(this.contractAddress, {
            info: {},
        });
    };
    data = async ({ key }: { key: Binary }): Promise<NullableBinary> => {
        return this.client.queryContractSmart(this.contractAddress, {
            data: {
                key,
            },
        });
    };
}
export interface ProxyInterface extends ProxyReadOnlyInterface {
    contractAddress: string;
    sender: string;
    authExec: (
        {
            transaction,
        }: {
            transaction: RelayTransaction;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        _funds?: Coin[]
    ) => Promise<ExecuteResult>;
    updateData: (
        {
            data,
        }: {
            data: Binary[][];
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        _funds?: Coin[]
    ) => Promise<ExecuteResult>;
}
export class ProxyClient extends ProxyQueryClient implements ProxyInterface {
    override client: SigningCosmWasmClient;
    sender: string;
    override contractAddress: string;

    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
        super(client, contractAddress);
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.authExec = this.authExec.bind(this);
        this.updateData = this.updateData.bind(this);
    }

    authExec = async (
        {
            transaction,
        }: {
            transaction: RelayTransaction;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        _funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                auth_exec: {
                    transaction,
                },
            },
            fee,
            memo,
            _funds
        );
    };
    updateData = async (
        {
            data,
        }: {
            data: Binary[][];
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        _funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                update_data: {
                    data,
                },
            },
            fee,
            memo,
            _funds
        );
    };
}
