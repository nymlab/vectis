/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Uint128, SubscriptionTier, Duration, InstantiateMsg, Coin, TierDetails, ExecuteMsg, RegistryServiceTraitExecMsg, RegistryManagementTraitExecMsg, ExecMsg, PluginCodeData, PluginMetadataData, QueryMsg, RegistryServiceTraitQueryMsg, RegistryManagementTraitQueryMsg, QueryMsg1, ContractVersion, RegistryConfigResponse, CanonicalAddr, Binary, PluginWithVersionResponse, Plugin, VersionDetails, NullablePlugin, PluginsResponse, NullableSubscriber, Expiration, Timestamp, Uint64, Subscriber } from "../types/pluginregistry.type";
import { CamelCasedProperties } from "type-fest";
export abstract class PluginRegistryExecuteMsgBuilder {
  static proxyInstallPlugin = ({
    addr,
    id
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    proxy_install_plugin: unknown;
  }>["proxy_install_plugin"]>): ExecuteMsg => {
    return {
      proxy_install_plugin: ({
        addr,
        id
      } as const)
    };
  };
  static proxyRemovePlugins = ({
    addr
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    proxy_remove_plugins: unknown;
  }>["proxy_remove_plugins"]>): ExecuteMsg => {
    return {
      proxy_remove_plugins: ({
        addr
      } as const)
    };
  };
  static subscribe = ({
    tier
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    subscribe: unknown;
  }>["subscribe"]>): ExecuteMsg => {
    return {
      subscribe: ({
        tier
      } as const)
    };
  };
  static registerPlugin = ({
    codeData,
    metadataData
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    register_plugin: unknown;
  }>["register_plugin"]>): ExecuteMsg => {
    return {
      register_plugin: ({
        code_data: codeData,
        metadata_data: metadataData
      } as const)
    };
  };
  static unregisterPlugin = ({
    id
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    unregister_plugin: unknown;
  }>["unregister_plugin"]>): ExecuteMsg => {
    return {
      unregister_plugin: ({
        id
      } as const)
    };
  };
  static newPluginVersion = ({
    codeUpdate,
    id,
    metadataUpdate
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    new_plugin_version: unknown;
  }>["new_plugin_version"]>): ExecuteMsg => {
    return {
      new_plugin_version: ({
        code_update: codeUpdate,
        id,
        metadata_update: metadataUpdate
      } as const)
    };
  };
  static updateRegistryFee = ({
    newFee
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    update_registry_fee: unknown;
  }>["update_registry_fee"]>): ExecuteMsg => {
    return {
      update_registry_fee: ({
        new_fee: newFee
      } as const)
    };
  };
  static addOrUpdateSubscriptionTiers = ({
    details,
    tier
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    add_or_update_subscription_tiers: unknown;
  }>["add_or_update_subscription_tiers"]>): ExecuteMsg => {
    return {
      add_or_update_subscription_tiers: ({
        details,
        tier
      } as const)
    };
  };
}
export abstract class PluginRegistryQueryMsgBuilder {
  static subsciptionDetails = ({
    addr
  }: CamelCasedProperties<Extract<QueryMsg, {
    subsciption_details: unknown;
  }>["subsciption_details"]>): QueryMsg => {
    return {
      subsciption_details: ({
        addr
      } as const)
    };
  };
  static getPlugins = ({
    limit,
    startAfter
  }: CamelCasedProperties<Extract<QueryMsg, {
    get_plugins: unknown;
  }>["get_plugins"]>): QueryMsg => {
    return {
      get_plugins: ({
        limit,
        start_after: startAfter
      } as const)
    };
  };
  static getPluginById = ({
    id
  }: CamelCasedProperties<Extract<QueryMsg, {
    get_plugin_by_id: unknown;
  }>["get_plugin_by_id"]>): QueryMsg => {
    return {
      get_plugin_by_id: ({
        id
      } as const)
    };
  };
  static getPluginByAddress = ({
    contractAddr
  }: CamelCasedProperties<Extract<QueryMsg, {
    get_plugin_by_address: unknown;
  }>["get_plugin_by_address"]>): QueryMsg => {
    return {
      get_plugin_by_address: ({
        contract_addr: contractAddr
      } as const)
    };
  };
  static getConfig = (): QueryMsg => {
    return {
      get_config: ({} as const)
    };
  };
  static contractVersion = (): QueryMsg => {
    return {
      contract_version: ({} as const)
    };
  };
}