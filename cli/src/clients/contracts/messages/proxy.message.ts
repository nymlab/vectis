/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { AuthenticatorProvider, AuthenticatorType, Binary, Uint128, PluginPermission, PluginSource, InstantiateMsg, ProxyCreateMsg, CreateWalletMsg, Entity, Authenticator, PluginInstallParams, Coin, ExecuteMsg, WalletTraitExecMsg, WalletPluginTraitExecMsg, CosmosMsgForEmpty, BankMsg, StakingMsg, DistributionMsg, IbcMsg, Timestamp, Uint64, WasmMsg, GovMsg, VoteOption, Decimal, ExecMsg, RelayTransaction, Empty, IbcTimeout, IbcTimeoutBlock, WeightedVoteOption, PluginMigrateParams, QueryMsg, WalletTraitQueryMsg, WalletPluginTraitQueryMsg, QueryMsg1, NullableBinary, Addr, WalletInfo, WalletAddrs, ContractVersion, PluginListResponse, PluginInfo } from "../types/proxy.type";
import { CamelCasedProperties } from "type-fest";
export abstract class ProxyExecuteMsgBuilder {
  static controllerRotation = ({
    newController
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    controller_rotation: unknown;
  }>["controller_rotation"]>): ExecuteMsg => {
    return {
      controller_rotation: ({
        new_controller: newController
      } as const)
    };
  };
  static authExec = ({
    transaction
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    auth_exec: unknown;
  }>["auth_exec"]>): ExecuteMsg => {
    return {
      auth_exec: ({
        transaction
      } as const)
    };
  };
  static authExecWithoutPlugins = ({
    transaction
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    auth_exec_without_plugins: unknown;
  }>["auth_exec_without_plugins"]>): ExecuteMsg => {
    return {
      auth_exec_without_plugins: ({
        transaction
      } as const)
    };
  };
  static controllerNonceUpdate = (): ExecuteMsg => {
    return {
      controller_nonce_update: ({} as const)
    };
  };
  static updateData = ({
    data
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    update_data: unknown;
  }>["update_data"]>): ExecuteMsg => {
    return {
      update_data: ({
        data
      } as const)
    };
  };
  static pluginExecute = ({
    msg
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    plugin_execute: unknown;
  }>["plugin_execute"]>): ExecuteMsg => {
    return {
      plugin_execute: ({
        msg
      } as const)
    };
  };
  static installPlugins = ({
    install
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    install_plugins: unknown;
  }>["install_plugins"]>): ExecuteMsg => {
    return {
      install_plugins: ({
        install
      } as const)
    };
  };
  static updatePlugins = ({
    migrate
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    update_plugins: unknown;
  }>["update_plugins"]>): ExecuteMsg => {
    return {
      update_plugins: ({
        migrate
      } as const)
    };
  };
  static removePlugins = ({
    pluginAddrs
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    remove_plugins: unknown;
  }>["remove_plugins"]>): ExecuteMsg => {
    return {
      remove_plugins: ({
        plugin_addrs: pluginAddrs
      } as const)
    };
  };
}
export abstract class ProxyQueryMsgBuilder {
  static info = (): QueryMsg => {
    return {
      info: ({} as const)
    };
  };
  static data = ({
    key
  }: CamelCasedProperties<Extract<QueryMsg, {
    data: unknown;
  }>["data"]>): QueryMsg => {
    return {
      data: ({
        key
      } as const)
    };
  };
  static plugins = ({
    limit,
    startAfter,
    ty
  }: CamelCasedProperties<Extract<QueryMsg, {
    plugins: unknown;
  }>["plugins"]>): QueryMsg => {
    return {
      plugins: ({
        limit,
        start_after: startAfter,
        ty
      } as const)
    };
  };
}