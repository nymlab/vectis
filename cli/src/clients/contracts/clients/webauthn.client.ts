/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { InstantiateMsg, ExecuteMsg, AuthenticatorTraitExecMsg, ExecMsg, QueryMsg, AuthenticatorTraitQueryMsg, QueryMsg1, Boolean, ContractVersion } from "../types/webauthn.type";
export interface WebauthnReadOnlyInterface {
  contractAddress: string;
  authenticate: ({
    controllerData,
    metadata,
    signature,
    signedData
  }: {
    controllerData: number[];
    metadata: number[][];
    signature: number[];
    signedData: number[];
  }) => Promise<Boolean>;
  contractVersion: () => Promise<ContractVersion>;
}
export class WebauthnQueryClient implements WebauthnReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.authenticate = this.authenticate.bind(this);
    this.contractVersion = this.contractVersion.bind(this);
  }

  authenticate = async ({
    controllerData,
    metadata,
    signature,
    signedData
  }: {
    controllerData: number[];
    metadata: number[][];
    signature: number[];
    signedData: number[];
  }): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      authenticate: {
        controller_data: controllerData,
        metadata,
        signature,
        signed_data: signedData
      }
    });
  };
  contractVersion = async (): Promise<ContractVersion> => {
    return this.client.queryContractSmart(this.contractAddress, {
      contract_version: {}
    });
  };
}