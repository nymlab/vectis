/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {
    InstantiateMsg,
    ExecuteMsg,
    Uint128,
    CosmosMsgForEmpty,
    BankMsg,
    Binary,
    IbcMsg,
    Timestamp,
    Uint64,
    WasmMsg,
    GovMsg,
    VoteOption,
    WalletFactoryInstantiateMsg,
    Coin,
    Empty,
    IbcTimeout,
    IbcTimeoutBlock,
    QueryMsg,
    NullableUint64,
    Nullable_Addr,
    Addr,
} from "./DaoTunnel.types";
export interface DaoTunnelReadOnlyInterface {
    contractAddress: string;
    controllers: ({ limit, startAfter }: { limit?: number; startAfter?: string }) => Promise<NullableUint64>;
    govec: () => Promise<Nullable_Addr>;
}
export class DaoTunnelQueryClient implements DaoTunnelReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;

    constructor(client: CosmWasmClient, contractAddress: string) {
        this.client = client;
        this.contractAddress = contractAddress;
        this.controllers = this.controllers.bind(this);
        this.govec = this.govec.bind(this);
    }

    controllers = async ({ limit, startAfter }: { limit?: number; startAfter?: string }): Promise<NullableUint64> => {
        return this.client.queryContractSmart(this.contractAddress, {
            controllers: {
                limit,
                start_after: startAfter,
            },
        });
    };
    govec = async (): Promise<Nullable_Addr> => {
        return this.client.queryContractSmart(this.contractAddress, {
            govec: {},
        });
    };
}
export interface DaoTunnelInterface extends DaoTunnelReadOnlyInterface {
    contractAddress: string;
    sender: string;
    addApprovedController: (
        {
            connectionId,
            portId,
        }: {
            connectionId: string;
            portId: string;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    instantiateRemoteFactory: (
        {
            channelId,
            codeId,
            msg,
        }: {
            channelId: string;
            codeId: number;
            msg: WalletFactoryInstantiateMsg;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    dispatch: (
        {
            channelId,
            jobId,
            msgs,
        }: {
            channelId: string;
            jobId?: string;
            msgs: CosmosMsgForEmpty[];
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    updateRemoteTunnelChannel: (
        {
            channelId,
        }: {
            channelId: string;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
}
export class DaoTunnelClient extends DaoTunnelQueryClient implements DaoTunnelInterface {
    override client: SigningCosmWasmClient;
    sender: string;
    override contractAddress: string;

    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
        super(client, contractAddress);
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.addApprovedController = this.addApprovedController.bind(this);
        this.instantiateRemoteFactory = this.instantiateRemoteFactory.bind(this);
        this.dispatch = this.dispatch.bind(this);
        this.updateRemoteTunnelChannel = this.updateRemoteTunnelChannel.bind(this);
    }

    addApprovedController = async (
        {
            connectionId,
            portId,
        }: {
            connectionId: string;
            portId: string;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                add_approved_controller: {
                    connection_id: connectionId,
                    port_id: portId,
                },
            },
            fee,
            memo,
            funds
        );
    };
    instantiateRemoteFactory = async (
        {
            channelId,
            codeId,
            msg,
        }: {
            channelId: string;
            codeId: number;
            msg: WalletFactoryInstantiateMsg;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                instantiate_remote_factory: {
                    channel_id: channelId,
                    code_id: codeId,
                    msg,
                },
            },
            fee,
            memo,
            funds
        );
    };
    dispatch = async (
        {
            channelId,
            jobId,
            msgs,
        }: {
            channelId: string;
            jobId?: string;
            msgs: CosmosMsgForEmpty[];
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                dispatch: {
                    channel_id: channelId,
                    job_id: jobId,
                    msgs,
                },
            },
            fee,
            memo,
            funds
        );
    };
    updateRemoteTunnelChannel = async (
        {
            channelId,
        }: {
            channelId: string;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                update_remote_tunnel_channel: {
                    channel_id: channelId,
                },
            },
            fee,
            memo,
            funds
        );
    };
}
