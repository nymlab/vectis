/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

export type CanonicalAddr = Binary;
export type Binary = string;
export interface InstantiateMsg {
    chain_config: ChainConfig;
    dao_config: DaoConfig;
    init_ibc_transfer_mod?: IbcTransferChannels | null;
}
export interface ChainConfig {
    denom: string;
    remote_factory?: CanonicalAddr | null;
}
export interface DaoConfig {
    addr: string;
    connection_id: string;
    dao_tunnel_channel?: string | null;
    dao_tunnel_port_id: string;
}
export interface IbcTransferChannels {
    endpoints: [string, string][];
}
export type ExecuteMsg =
    | {
          dao_actions: {
              msg: RemoteTunnelPacketMsg;
          };
      }
    | {
          ibc_transfer: {
              receiver: Receiver;
          };
      };
export type RemoteTunnelPacketMsg =
    | {
          mint_govec: {
              wallet_addr: string;
          };
      }
    | {
          govec_actions: GovecExecuteMsg;
      }
    | {
          stake_actions: ExecuteMsg1;
      }
    | {
          pre_proposal_actions: {
              msg: ExecuteMsgForProposeMessageAndExecuteExt;
              pre_prop_module_addr: string;
          };
      }
    | {
          proposal_actions: {
              msg: ExecuteMsg1;
              prop_module_addr: string;
          };
      };
export type GovecExecuteMsg =
    | {
          transfer: {
              amount: Uint128;
              recipient: string;
              relayed_from?: string | null;
          };
      }
    | {
          proposal_transfer: {
              deposit: Uint128;
              proposer: string;
          };
      }
    | {
          burn: {
              amount: Uint128;
          };
      }
    | {
          exit: {
              relayed_from?: string | null;
          };
      }
    | {
          send: {
              amount: Uint128;
              contract: string;
              msg: Binary;
              relayed_from?: string | null;
          };
      }
    | {
          mint: {
              new_wallet: string;
          };
      }
    | {
          update_mint_cap: {
              new_mint_cap?: Uint128 | null;
          };
      }
    | {
          update_mint_amount: {
              new_amount: Uint128;
          };
      }
    | {
          update_config_addr: {
              new_addr: UpdateAddrReq;
          };
      }
    | {
          update_marketing: {
              description?: string | null;
              marketing?: string | null;
              project?: string | null;
          };
      }
    | {
          upload_logo: Logo;
      };
export type Uint128 = string;
export type UpdateAddrReq =
    | {
          dao: string;
      }
    | {
          dao_tunnel: string;
      }
    | {
          factory: string;
      }
    | {
          staking: string;
      }
    | {
          proposal: string;
      };
export type Logo =
    | {
          url: string;
      }
    | {
          embedded: EmbeddedLogo;
      };
export type EmbeddedLogo =
    | {
          svg: Binary;
      }
    | {
          png: Binary;
      };
export type ExecuteMsg1 =
    | {
          receive: Cw20ReceiveMsg;
      }
    | {
          unstake: {
              amount: Uint128;
              relayed_from?: string | null;
          };
      }
    | {
          claim: {
              relayed_from?: string | null;
          };
      }
    | {
          update_config: {
              duration?: Duration | null;
          };
      }
    | {
          add_hook: {
              addr: string;
          };
      }
    | {
          remove_hook: {
              addr: string;
          };
      }
    | {
          update_ownership: Action;
      };
export type Duration =
    | {
          height: number;
      }
    | {
          time: number;
      };
export type Action =
    | {
          transfer_ownership: {
              expiry?: Expiration | null;
              new_owner: string;
          };
      }
    | "accept_ownership"
    | "renounce_ownership";
export type Expiration =
    | {
          at_height: number;
      }
    | {
          at_time: Timestamp;
      }
    | {
          never: {};
      };
export type Timestamp = Uint64;
export type Uint64 = number;
export type ExecuteMsgForProposeMessageAndExecuteExt =
    | {
          propose: {
              msg: ProposeMessage;
          };
      }
    | {
          update_config: {
              deposit_info?: UncheckedDepositInfo | null;
              open_proposal_submission: boolean;
          };
      }
    | {
          withdraw: {
              denom?: UncheckedDenom | null;
          };
      }
    | {
          extension: {
              msg: ExecuteExt;
          };
      }
    | {
          add_proposal_submitted_hook: {
              address: string;
          };
      }
    | {
          remove_proposal_submitted_hook: {
              address: string;
          };
      }
    | {
          proposal_completed_hook: {
              new_status: Status;
              proposal_id: number;
          };
      };
export type ProposeMessage = {
    propose: {
        description: string;
        msgs: CosmosMsgForEmpty[];
        relayed_from?: string | null;
        title: string;
    };
};
export type CosmosMsgForEmpty =
    | {
          bank: BankMsg;
      }
    | {
          custom: Empty;
      }
    | {
          staking: StakingMsg;
      }
    | {
          distribution: DistributionMsg;
      }
    | {
          stargate: {
              type_url: string;
              value: Binary;
              [k: string]: unknown;
          };
      }
    | {
          ibc: IbcMsg;
      }
    | {
          wasm: WasmMsg;
      }
    | {
          gov: GovMsg;
      };
export type BankMsg =
    | {
          send: {
              amount: Coin[];
              to_address: string;
              [k: string]: unknown;
          };
      }
    | {
          burn: {
              amount: Coin[];
              [k: string]: unknown;
          };
      };
export type StakingMsg =
    | {
          delegate: {
              amount: Coin;
              validator: string;
              [k: string]: unknown;
          };
      }
    | {
          undelegate: {
              amount: Coin;
              validator: string;
              [k: string]: unknown;
          };
      }
    | {
          redelegate: {
              amount: Coin;
              dst_validator: string;
              src_validator: string;
              [k: string]: unknown;
          };
      };
export type DistributionMsg =
    | {
          set_withdraw_address: {
              address: string;
              [k: string]: unknown;
          };
      }
    | {
          withdraw_delegator_reward: {
              validator: string;
              [k: string]: unknown;
          };
      };
export type IbcMsg =
    | {
          transfer: {
              amount: Coin;
              channel_id: string;
              timeout: IbcTimeout;
              to_address: string;
              [k: string]: unknown;
          };
      }
    | {
          send_packet: {
              channel_id: string;
              data: Binary;
              timeout: IbcTimeout;
              [k: string]: unknown;
          };
      }
    | {
          close_channel: {
              channel_id: string;
              [k: string]: unknown;
          };
      };
export type WasmMsg =
    | {
          execute: {
              contract_addr: string;
              funds: Coin[];
              msg: Binary;
              [k: string]: unknown;
          };
      }
    | {
          instantiate: {
              admin?: string | null;
              code_id: number;
              funds: Coin[];
              label: string;
              msg: Binary;
              [k: string]: unknown;
          };
      }
    | {
          migrate: {
              contract_addr: string;
              msg: Binary;
              new_code_id: number;
              [k: string]: unknown;
          };
      }
    | {
          update_admin: {
              admin: string;
              contract_addr: string;
              [k: string]: unknown;
          };
      }
    | {
          clear_admin: {
              contract_addr: string;
              [k: string]: unknown;
          };
      };
export type GovMsg = {
    vote: {
        proposal_id: number;
        vote: VoteOption;
        [k: string]: unknown;
    };
};
export type VoteOption = "yes" | "no" | "abstain" | "no_with_veto";
export type DepositToken =
    | {
          token: {
              denom: UncheckedDenom;
          };
      }
    | {
          voting_module_token: {};
      };
export type UncheckedDenom =
    | {
          native: string;
      }
    | {
          cw20: string;
      };
export type DepositRefundPolicy = "always" | "only_passed" | "never";
export type ExecuteExt =
    | {
          approve: {
              id: number;
          };
      }
    | {
          reject: {
              id: number;
          };
      }
    | {
          update_approver: {
              address: string;
          };
      };
export type Status = "open" | "rejected" | "passed" | "executed" | "closed" | "execution_failed";
export interface Cw20ReceiveMsg {
    amount: Uint128;
    msg: Binary;
    sender: string;
}
export interface Coin {
    amount: Uint128;
    denom: string;
    [k: string]: unknown;
}
export interface Empty {
    [k: string]: unknown;
}
export interface IbcTimeout {
    block?: IbcTimeoutBlock | null;
    timestamp?: Timestamp | null;
    [k: string]: unknown;
}
export interface IbcTimeoutBlock {
    height: number;
    revision: number;
    [k: string]: unknown;
}
export interface UncheckedDepositInfo {
    amount: Uint128;
    denom: DepositToken;
    refund_policy: DepositRefundPolicy;
}
export interface Receiver {
    addr: string;
    connection_id: string;
}
export type QueryMsg =
    | {
          dao_config: {};
      }
    | {
          chain_config: {};
      }
    | {
          ibc_transfer_channels: {
              limit?: number | null;
              start_after?: string | null;
          };
      }
    | {
          next_job_id: {};
      };
export type Addr = string;
export interface ChainConfigResponse {
    denom: string;
    remote_factory?: Addr | null;
}
