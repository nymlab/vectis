/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.22.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

export interface InstantiateMsg {
    denom: string;
    govec_minter: string;
    init_ibc_transfer_mods?: IbcTransferChannels | null;
    init_remote_tunnels?: RemoteTunnels | null;
}
export interface IbcTransferChannels {
    endpoints: [string, string][];
}
export interface RemoteTunnels {
    tunnels: [string, string][];
}
export type ExecuteMsg =
    | {
          add_approved_controller: {
              connection_id: string;
              port_id: string;
          };
      }
    | {
          remove_approved_controller: {
              connection_id: string;
              port_id: string;
          };
      }
    | {
          update_dao_addr: {
              new_addr: string;
          };
      }
    | {
          update_govec_addr: {
              new_addr: string;
          };
      }
    | {
          update_ibc_transfer_reciever_channel: {
              channel_id?: string | null;
              connection_id: string;
          };
      }
    | {
          ibc_transfer: {
              receiver: Receiver;
          };
      }
    | {
          dispatch_action_on_remote_tunnel: {
              channel_id: string;
              job_id: number;
              msg: DaoTunnelPacketMsg;
          };
      };
export type DaoTunnelPacketMsg =
    | {
          update_dao_config: {
              new_config: DaoConfig;
          };
      }
    | {
          update_chain_config: {
              new_denom: string;
              new_remote_factory?: string | null;
          };
      }
    | {
          instantiate_factory: {
              code_id: number;
              msg: WalletFactoryInstantiateMsg;
          };
      }
    | {
          update_ibc_transfer_reciever_channel: {
              channel?: string | null;
              connection_id: string;
          };
      }
    | {
          dispatch_actions: {
              msgs: CosmosMsgForEmpty[];
          };
      };
export type Uint128 = string;
export type CosmosMsgForEmpty =
    | {
          bank: BankMsg;
      }
    | {
          custom: Empty;
      }
    | {
          staking: StakingMsg;
      }
    | {
          distribution: DistributionMsg;
      }
    | {
          stargate: {
              type_url: string;
              value: Binary;
              [k: string]: unknown;
          };
      }
    | {
          ibc: IbcMsg;
      }
    | {
          wasm: WasmMsg;
      }
    | {
          gov: GovMsg;
      };
export type BankMsg =
    | {
          send: {
              amount: Coin[];
              to_address: string;
              [k: string]: unknown;
          };
      }
    | {
          burn: {
              amount: Coin[];
              [k: string]: unknown;
          };
      };
export type StakingMsg =
    | {
          delegate: {
              amount: Coin;
              validator: string;
              [k: string]: unknown;
          };
      }
    | {
          undelegate: {
              amount: Coin;
              validator: string;
              [k: string]: unknown;
          };
      }
    | {
          redelegate: {
              amount: Coin;
              dst_validator: string;
              src_validator: string;
              [k: string]: unknown;
          };
      };
export type DistributionMsg =
    | {
          set_withdraw_address: {
              address: string;
              [k: string]: unknown;
          };
      }
    | {
          withdraw_delegator_reward: {
              validator: string;
              [k: string]: unknown;
          };
      };
export type IbcMsg =
    | {
          transfer: {
              amount: Coin;
              channel_id: string;
              timeout: IbcTimeout;
              to_address: string;
              [k: string]: unknown;
          };
      }
    | {
          send_packet: {
              channel_id: string;
              data: Binary;
              timeout: IbcTimeout;
              [k: string]: unknown;
          };
      }
    | {
          close_channel: {
              channel_id: string;
              [k: string]: unknown;
          };
      };
export type Timestamp = Uint64;
export type Uint64 = string;
export type WasmMsg =
    | {
          execute: {
              contract_addr: string;
              funds: Coin[];
              msg: Binary;
              [k: string]: unknown;
          };
      }
    | {
          instantiate: {
              admin?: string | null;
              code_id: number;
              funds: Coin[];
              label: string;
              msg: Binary;
              [k: string]: unknown;
          };
      }
    | {
          migrate: {
              contract_addr: string;
              msg: Binary;
              new_code_id: number;
              [k: string]: unknown;
          };
      }
    | {
          update_admin: {
              admin: string;
              contract_addr: string;
              [k: string]: unknown;
          };
      }
    | {
          clear_admin: {
              contract_addr: string;
              [k: string]: unknown;
          };
      };
export type GovMsg = {
    vote: {
        proposal_id: number;
        vote: VoteOption;
        [k: string]: unknown;
    };
};
export type VoteOption = "yes" | "no" | "abstain" | "no_with_veto";
export interface Receiver {
    addr: string;
    connection_id: string;
}
export interface DaoConfig {
    addr: string;
    connection_id: string;
    dao_tunnel_channel?: string | null;
    dao_tunnel_port_id: string;
}
export interface WalletFactoryInstantiateMsg {
    addr_prefix: string;
    claim_fee: Coin;
    govec_minter?: string | null;
    proxy_code_id: number;
    proxy_multisig_code_id: number;
    wallet_fee: Coin;
}
export interface Coin {
    amount: Uint128;
    denom: string;
    [k: string]: unknown;
}
export interface Empty {
    [k: string]: unknown;
}
export interface IbcTimeout {
    block?: IbcTimeoutBlock | null;
    timestamp?: Timestamp | null;
    [k: string]: unknown;
}
export interface IbcTimeoutBlock {
    height: number;
    revision: number;
    [k: string]: unknown;
}
export type QueryMsg =
    | {
          controllers: {
              limit?: number | null;
              start_after?: [string, string] | null;
          };
      }
    | {
          govec: {};
      }
    | {
          dao: {};
      }
    | {
          ibc_transfer_channels: {
              limit?: number | null;
              start_after?: string | null;
          };
      };
export type NullableAddr = Addr | null;
export type Addr = string;
