/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.22.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {
    InstantiateMsg,
    IbcTransferChannels,
    RemoteTunnels,
    ExecuteMsg,
    DaoTunnelPacketMsg,
    CanonicalAddr,
    Uint128,
    CosmosMsgForEmpty,
    BankMsg,
    StakingMsg,
    DistributionMsg,
    Binary,
    IbcMsg,
    Timestamp,
    Uint64,
    WasmMsg,
    GovMsg,
    VoteOption,
    Receiver,
    DaoConfig,
    ChainConfig,
    WalletFactoryInstantiateMsg,
    Coin,
    Empty,
    IbcTimeout,
    IbcTimeoutBlock,
    QueryMsg,
    NullableAddr,
    Addr,
} from "./DaoTunnel.types";
export interface DaoTunnelReadOnlyInterface {
    contractAddress: string;
    controllers: ({ limit, startAfter }: { limit?: number; startAfter?: string[][] }) => Promise<RemoteTunnels>;
    govec: () => Promise<NullableAddr>;
    dao: () => Promise<NullableAddr>;
    ibcTransferChannels: ({
        limit,
        startAfter,
    }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<IbcTransferChannels>;
}
export class DaoTunnelQueryClient implements DaoTunnelReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;

    constructor(client: CosmWasmClient, contractAddress: string) {
        this.client = client;
        this.contractAddress = contractAddress;
        this.controllers = this.controllers.bind(this);
        this.govec = this.govec.bind(this);
        this.dao = this.dao.bind(this);
        this.ibcTransferChannels = this.ibcTransferChannels.bind(this);
    }

    controllers = async ({
        limit,
        startAfter,
    }: {
        limit?: number;
        startAfter?: string[][];
    }): Promise<RemoteTunnels> => {
        return this.client.queryContractSmart(this.contractAddress, {
            controllers: {
                limit,
                start_after: startAfter,
            },
        });
    };
    govec = async (): Promise<NullableAddr> => {
        return this.client.queryContractSmart(this.contractAddress, {
            govec: {},
        });
    };
    dao = async (): Promise<NullableAddr> => {
        return this.client.queryContractSmart(this.contractAddress, {
            dao: {},
        });
    };
    ibcTransferChannels = async ({
        limit,
        startAfter,
    }: {
        limit?: number;
        startAfter?: string;
    }): Promise<IbcTransferChannels> => {
        return this.client.queryContractSmart(this.contractAddress, {
            ibc_transfer_channels: {
                limit,
                start_after: startAfter,
            },
        });
    };
}
export interface DaoTunnelInterface extends DaoTunnelReadOnlyInterface {
    contractAddress: string;
    sender: string;
    addApprovedController: (
        {
            connectionId,
            portId,
        }: {
            connectionId: string;
            portId: string;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    removeApprovedController: (
        {
            connectionId,
            portId,
        }: {
            connectionId: string;
            portId: string;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    updateDaoAddr: (
        {
            newAddr,
        }: {
            newAddr: string;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    updateGovecAddr: (
        {
            newAddr,
        }: {
            newAddr: string;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    updateIbcTransferRecieverChannel: (
        {
            channelId,
            connectionId,
        }: {
            channelId?: string;
            connectionId: string;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    ibcTransfer: (
        {
            receiver,
        }: {
            receiver: Receiver;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    dispatchActionOnRemoteTunnel: (
        {
            channelId,
            jobId,
            msg,
        }: {
            channelId: string;
            jobId: number;
            msg: DaoTunnelPacketMsg;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
}
export class DaoTunnelClient extends DaoTunnelQueryClient implements DaoTunnelInterface {
    override client: SigningCosmWasmClient;
    sender: string;
    override contractAddress: string;

    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
        super(client, contractAddress);
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.addApprovedController = this.addApprovedController.bind(this);
        this.removeApprovedController = this.removeApprovedController.bind(this);
        this.updateDaoAddr = this.updateDaoAddr.bind(this);
        this.updateGovecAddr = this.updateGovecAddr.bind(this);
        this.updateIbcTransferRecieverChannel = this.updateIbcTransferRecieverChannel.bind(this);
        this.ibcTransfer = this.ibcTransfer.bind(this);
        this.dispatchActionOnRemoteTunnel = this.dispatchActionOnRemoteTunnel.bind(this);
    }

    addApprovedController = async (
        {
            connectionId,
            portId,
        }: {
            connectionId: string;
            portId: string;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                add_approved_controller: {
                    connection_id: connectionId,
                    port_id: portId,
                },
            },
            fee,
            memo,
            funds
        );
    };
    removeApprovedController = async (
        {
            connectionId,
            portId,
        }: {
            connectionId: string;
            portId: string;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                remove_approved_controller: {
                    connection_id: connectionId,
                    port_id: portId,
                },
            },
            fee,
            memo,
            funds
        );
    };
    updateDaoAddr = async (
        {
            newAddr,
        }: {
            newAddr: string;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                update_dao_addr: {
                    new_addr: newAddr,
                },
            },
            fee,
            memo,
            funds
        );
    };
    updateGovecAddr = async (
        {
            newAddr,
        }: {
            newAddr: string;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                update_govec_addr: {
                    new_addr: newAddr,
                },
            },
            fee,
            memo,
            funds
        );
    };
    updateIbcTransferRecieverChannel = async (
        {
            channelId,
            connectionId,
        }: {
            channelId?: string;
            connectionId: string;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                update_ibc_transfer_reciever_channel: {
                    channel_id: channelId,
                    connection_id: connectionId,
                },
            },
            fee,
            memo,
            funds
        );
    };
    ibcTransfer = async (
        {
            receiver,
        }: {
            receiver: Receiver;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                ibc_transfer: {
                    receiver,
                },
            },
            fee,
            memo,
            funds
        );
    };
    dispatchActionOnRemoteTunnel = async (
        {
            channelId,
            jobId,
            msg,
        }: {
            channelId: string;
            jobId: number;
            msg: DaoTunnelPacketMsg;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                dispatch_action_on_remote_tunnel: {
                    channel_id: channelId,
                    job_id: jobId,
                    msg,
                },
            },
            fee,
            memo,
            funds
        );
    };
}
