/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.26.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

export interface InstantiateMsg {
    croncat_factory_addr: string;
    vectis_account_addr: string;
    [k: string]: unknown;
}
export type ExecuteMsg = ExecMsg;
export type ExecMsg =
    | {
          execute: {
              action_id: number;
              [k: string]: unknown;
          };
      }
    | {
          create_task: {
              auto_refill?: Uint128 | null;
              task: TaskRequest;
              [k: string]: unknown;
          };
      }
    | {
          remove_task: {
              task_id: number;
              [k: string]: unknown;
          };
      }
    | {
          withdraw_funds: {
              [k: string]: unknown;
          };
      }
    | {
          refill_task: {
              task_id: number;
              [k: string]: unknown;
          };
      };
export type Uint128 = string;
export type CosmosMsgForEmpty =
    | {
          bank: BankMsg;
      }
    | {
          custom: Empty;
      }
    | {
          staking: StakingMsg;
      }
    | {
          distribution: DistributionMsg;
      }
    | {
          stargate: {
              type_url: string;
              value: Binary;
              [k: string]: unknown;
          };
      }
    | {
          ibc: IbcMsg;
      }
    | {
          wasm: WasmMsg;
      }
    | {
          gov: GovMsg;
      };
export type BankMsg =
    | {
          send: {
              amount: Coin[];
              to_address: string;
              [k: string]: unknown;
          };
      }
    | {
          burn: {
              amount: Coin[];
              [k: string]: unknown;
          };
      };
export type StakingMsg =
    | {
          delegate: {
              amount: Coin;
              validator: string;
              [k: string]: unknown;
          };
      }
    | {
          undelegate: {
              amount: Coin;
              validator: string;
              [k: string]: unknown;
          };
      }
    | {
          redelegate: {
              amount: Coin;
              dst_validator: string;
              src_validator: string;
              [k: string]: unknown;
          };
      };
export type DistributionMsg =
    | {
          set_withdraw_address: {
              address: string;
              [k: string]: unknown;
          };
      }
    | {
          withdraw_delegator_reward: {
              validator: string;
              [k: string]: unknown;
          };
      };
export type Binary = string;
export type IbcMsg =
    | {
          transfer: {
              amount: Coin;
              channel_id: string;
              timeout: IbcTimeout;
              to_address: string;
              [k: string]: unknown;
          };
      }
    | {
          send_packet: {
              channel_id: string;
              data: Binary;
              timeout: IbcTimeout;
              [k: string]: unknown;
          };
      }
    | {
          close_channel: {
              channel_id: string;
              [k: string]: unknown;
          };
      };
export type Timestamp = Uint64;
export type Uint64 = number;
export type WasmMsg =
    | {
          execute: {
              contract_addr: string;
              funds: Coin[];
              msg: Binary;
              [k: string]: unknown;
          };
      }
    | {
          instantiate: {
              admin?: string | null;
              code_id: number;
              funds: Coin[];
              label: string;
              msg: Binary;
              [k: string]: unknown;
          };
      }
    | {
          migrate: {
              contract_addr: string;
              msg: Binary;
              new_code_id: number;
              [k: string]: unknown;
          };
      }
    | {
          update_admin: {
              admin: string;
              contract_addr: string;
              [k: string]: unknown;
          };
      }
    | {
          clear_admin: {
              contract_addr: string;
              [k: string]: unknown;
          };
      };
export type GovMsg = {
    vote: {
        proposal_id: number;
        vote: VoteOption;
        [k: string]: unknown;
    };
};
export type VoteOption = "yes" | "no" | "abstain" | "no_with_veto";
export type Boundary =
    | {
          height: BoundaryHeight;
      }
    | {
          time: BoundaryTime;
      };
export type Interval =
    | "once"
    | "immediate"
    | {
          block: number;
      }
    | {
          cron: string;
      };
export type CosmosQueryForWasmQuery =
    | {
          croncat: CroncatQuery;
      }
    | {
          wasm: WasmQuery;
      };
export type WasmQuery =
    | {
          smart: {
              contract_addr: string;
              msg: Binary;
              [k: string]: unknown;
          };
      }
    | {
          raw: {
              contract_addr: string;
              key: Binary;
              [k: string]: unknown;
          };
      }
    | {
          contract_info: {
              contract_addr: string;
              [k: string]: unknown;
          };
      };
export type ValueIndex =
    | {
          key: string;
      }
    | {
          index: number;
      };
export type PathToValue = ValueIndex[];
export interface TaskRequest {
    actions: ActionForEmpty[];
    boundary?: Boundary | null;
    cw20?: Cw20Coin | null;
    interval: Interval;
    queries?: CosmosQueryForWasmQuery[] | null;
    stop_on_fail: boolean;
    transforms?: Transform[] | null;
}
export interface ActionForEmpty {
    gas_limit?: number | null;
    msg: CosmosMsgForEmpty;
}
export interface Coin {
    amount: Uint128;
    denom: string;
    [k: string]: unknown;
}
export interface Empty {
    [k: string]: unknown;
}
export interface IbcTimeout {
    block?: IbcTimeoutBlock | null;
    timestamp?: Timestamp | null;
    [k: string]: unknown;
}
export interface IbcTimeoutBlock {
    height: number;
    revision: number;
    [k: string]: unknown;
}
export interface BoundaryHeight {
    end?: Uint64 | null;
    start?: Uint64 | null;
}
export interface BoundaryTime {
    end?: Timestamp | null;
    start?: Timestamp | null;
}
export interface Cw20Coin {
    address: string;
    amount: Uint128;
}
export interface CroncatQuery {
    check_result: boolean;
    contract_addr: string;
    msg: Binary;
}
export interface Transform {
    action_idx: number;
    action_path: PathToValue;
    query_idx: number;
    query_response_path: PathToValue;
}
export type QueryMsg = QueryMsg1;
export type QueryMsg1 =
    | {
          action_id: {
              [k: string]: unknown;
          };
      }
    | {
          action: {
              action_id: number;
              [k: string]: unknown;
          };
      };
export type Addr = string;
export interface CronKittyActionResp {
    auto_refill?: Uint128 | null;
    manager_addr: Addr;
    msgs: CosmosMsgForEmpty[];
    task_addr: Addr;
    task_hash?: string | null;
}
