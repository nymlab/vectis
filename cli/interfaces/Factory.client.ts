/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.26.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {
    Uint128,
    InstantiateMsg,
    Coin,
    ExecuteMsg,
    ProxyMigrationTxMsg,
    Binary,
    WalletAddr,
    CanonicalAddr,
    Addr,
    CodeIdType,
    FeeType,
    CreateWalletMsg,
    Guardians,
    MultiSig,
    RelayTransaction,
    QueryMsg,
    Uint64,
    FeesResponse,
} from "./Factory.types";
export interface FactoryReadOnlyInterface {
    contractAddress: string;
    totalCreated: () => Promise<Uint64>;
    codeId: ({ ty }: { ty: CodeIdType }) => Promise<Uint64>;
    fees: () => Promise<FeesResponse>;
    deployerAddr: () => Promise<Addr>;
}
export class FactoryQueryClient implements FactoryReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;

    constructor(client: CosmWasmClient, contractAddress: string) {
        this.client = client;
        this.contractAddress = contractAddress;
        this.totalCreated = this.totalCreated.bind(this);
        this.codeId = this.codeId.bind(this);
        this.fees = this.fees.bind(this);
        this.deployerAddr = this.deployerAddr.bind(this);
    }

    totalCreated = async (): Promise<Uint64> => {
        return this.client.queryContractSmart(this.contractAddress, {
            total_created: {},
        });
    };
    codeId = async ({ ty }: { ty: CodeIdType }): Promise<Uint64> => {
        return this.client.queryContractSmart(this.contractAddress, {
            code_id: {
                ty,
            },
        });
    };
    fees = async (): Promise<FeesResponse> => {
        return this.client.queryContractSmart(this.contractAddress, {
            fees: {},
        });
    };
    deployerAddr = async (): Promise<Addr> => {
        return this.client.queryContractSmart(this.contractAddress, {
            deployer_addr: {},
        });
    };
}
export interface FactoryInterface extends FactoryReadOnlyInterface {
    contractAddress: string;
    sender: string;
    createWallet: (
        {
            createWalletMsg,
        }: {
            createWalletMsg: CreateWalletMsg;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    migrateWallet: (
        {
            migrationMsg,
            walletAddress,
        }: {
            migrationMsg: ProxyMigrationTxMsg;
            walletAddress: WalletAddr;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    updateCodeId: (
        {
            newCodeId,
            type,
        }: {
            newCodeId: number;
            type: CodeIdType;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    updateConfigFee: (
        {
            newFee,
            type,
        }: {
            newFee: Coin;
            type: FeeType;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    updateDeployer: (
        {
            addr,
        }: {
            addr: string;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
}
export class FactoryClient extends FactoryQueryClient implements FactoryInterface {
    override client: SigningCosmWasmClient;
    sender: string;
    override contractAddress: string;

    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
        super(client, contractAddress);
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.createWallet = this.createWallet.bind(this);
        this.migrateWallet = this.migrateWallet.bind(this);
        this.updateCodeId = this.updateCodeId.bind(this);
        this.updateConfigFee = this.updateConfigFee.bind(this);
        this.updateDeployer = this.updateDeployer.bind(this);
    }

    createWallet = async (
        {
            createWalletMsg,
        }: {
            createWalletMsg: CreateWalletMsg;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                create_wallet: {
                    create_wallet_msg: createWalletMsg,
                },
            },
            fee,
            memo,
            funds
        );
    };
    migrateWallet = async (
        {
            migrationMsg,
            walletAddress,
        }: {
            migrationMsg: ProxyMigrationTxMsg;
            walletAddress: WalletAddr;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                migrate_wallet: {
                    migration_msg: migrationMsg,
                    wallet_address: walletAddress,
                },
            },
            fee,
            memo,
            funds
        );
    };
    updateCodeId = async (
        {
            newCodeId,
            type,
        }: {
            newCodeId: number;
            type: CodeIdType;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                update_code_id: {
                    new_code_id: newCodeId,
                    type,
                },
            },
            fee,
            memo,
            funds
        );
    };
    updateConfigFee = async (
        {
            newFee,
            type,
        }: {
            newFee: Coin;
            type: FeeType;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                update_config_fee: {
                    new_fee: newFee,
                    type,
                },
            },
            fee,
            memo,
            funds
        );
    };
    updateDeployer = async (
        {
            addr,
        }: {
            addr: string;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                update_deployer: {
                    addr,
                },
            },
            fee,
            memo,
            funds
        );
    };
}
