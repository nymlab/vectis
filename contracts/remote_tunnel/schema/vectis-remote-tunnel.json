{
  "contract_name": "vectis-remote-tunnel",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "chain_config",
      "dao_config"
    ],
    "properties": {
      "chain_config": {
        "$ref": "#/definitions/ChainConfig"
      },
      "dao_config": {
        "$ref": "#/definitions/DaoConfig"
      },
      "init_ibc_transfer_mod": {
        "anyOf": [
          {
            "$ref": "#/definitions/IbcTransferChannels"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "CanonicalAddr": {
        "$ref": "#/definitions/Binary"
      },
      "ChainConfig": {
        "type": "object",
        "required": [
          "denom"
        ],
        "properties": {
          "denom": {
            "description": "Denom of the current chain",
            "type": "string"
          },
          "remote_factory": {
            "description": "The Factory that has the remote features on the local chain",
            "anyOf": [
              {
                "$ref": "#/definitions/CanonicalAddr"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "DaoConfig": {
        "type": "object",
        "required": [
          "addr",
          "connection_id",
          "dao_tunnel_port_id"
        ],
        "properties": {
          "addr": {
            "description": "DAO addr on dao chain",
            "type": "string"
          },
          "connection_id": {
            "description": "The local connection_id that is bounded to the remote chain light client This can be queried by the using the `IbcPacket` when receiving the ibc message IbcPacket.dest.channel_id and IbcPacket.dest.port_id",
            "type": "string"
          },
          "dao_tunnel_channel": {
            "description": "The channel_id to be used to call to the dao-tunnel contract on dao-chain This can be updated by the dao-tunnel forwarding message from the DAO",
            "type": [
              "string",
              "null"
            ]
          },
          "dao_tunnel_port_id": {
            "description": "The src.port_id from the connection This is bounded to the contract address on the remote chain `wasm.<contract_address>`, i.e. the dao-tunnel contract address",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "IbcTransferChannels": {
        "description": "Returned when IBC_TRANSFER_MODULES are queried",
        "type": "object",
        "required": [
          "endpoints"
        ],
        "properties": {
          "endpoints": {
            "description": "(connection_id, channel_id) The channel_id are for channel already established",
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                },
                {
                  "type": "string"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Executed by proxy wallets for Dao actions",
        "type": "object",
        "required": [
          "dao_actions"
        ],
        "properties": {
          "dao_actions": {
            "type": "object",
            "required": [
              "msg"
            ],
            "properties": {
              "msg": {
                "$ref": "#/definitions/RemoteTunnelPacketMsg"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Transfer native tokens to another chain Fund amount is forward from the MessageInfo.funds",
        "type": "object",
        "required": [
          "ibc_transfer"
        ],
        "properties": {
          "ibc_transfer": {
            "type": "object",
            "required": [
              "receiver"
            ],
            "properties": {
              "receiver": {
                "$ref": "#/definitions/Receiver"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Cw20ReceiveMsg": {
        "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
        "type": "object",
        "required": [
          "amount",
          "msg",
          "sender"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "sender": {
            "type": "string"
          }
        }
      },
      "Duration": {
        "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "height"
            ],
            "properties": {
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Time in seconds",
            "type": "object",
            "required": [
              "time"
            ],
            "properties": {
              "time": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "EmbeddedLogo": {
        "description": "This is used to store the logo on the blockchain in an accepted format. Enforce maximum size of 5KB on all variants.",
        "oneOf": [
          {
            "description": "Store the Logo as an SVG file. The content must conform to the spec at https://en.wikipedia.org/wiki/Scalable_Vector_Graphics (The contract should do some light-weight sanity-check validation)",
            "type": "object",
            "required": [
              "svg"
            ],
            "properties": {
              "svg": {
                "$ref": "#/definitions/Binary"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Store the Logo as a PNG file. This will likely only support up to 64x64 or so within the 5KB limit.",
            "type": "object",
            "required": [
              "png"
            ],
            "properties": {
              "png": {
                "$ref": "#/definitions/Binary"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ExecuteMsg": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "receive"
            ],
            "properties": {
              "receive": {
                "$ref": "#/definitions/Cw20ReceiveMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "unstake"
            ],
            "properties": {
              "unstake": {
                "type": "object",
                "required": [
                  "amount"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Uint128"
                  },
                  "relayed_from": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "claim"
            ],
            "properties": {
              "claim": {
                "type": "object",
                "properties": {
                  "relayed_from": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_config"
            ],
            "properties": {
              "update_config": {
                "type": "object",
                "properties": {
                  "duration": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Duration"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "manager": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "owner": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "add_hook"
            ],
            "properties": {
              "add_hook": {
                "type": "object",
                "required": [
                  "addr"
                ],
                "properties": {
                  "addr": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "remove_hook"
            ],
            "properties": {
              "remove_hook": {
                "type": "object",
                "required": [
                  "addr"
                ],
                "properties": {
                  "addr": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "GovecExecuteMsg": {
        "oneOf": [
          {
            "description": "Transfer is a base message to move tokens to another account without triggering actions",
            "type": "object",
            "required": [
              "transfer"
            ],
            "properties": {
              "transfer": {
                "type": "object",
                "required": [
                  "amount",
                  "recipient"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Uint128"
                  },
                  "recipient": {
                    "type": "string"
                  },
                  "relayed_from": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This is implemented such that the sender MUST be a DAO proposal module The recipient will always be the sender, aka the proposal contract called by `get_deposit_msg` required interface in proposal_single",
            "type": "object",
            "required": [
              "proposal_transfer"
            ],
            "properties": {
              "proposal_transfer": {
                "type": "object",
                "required": [
                  "deposit",
                  "proposer"
                ],
                "properties": {
                  "deposit": {
                    "$ref": "#/definitions/Uint128"
                  },
                  "proposer": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Burn is a base message to destroy tokens forever Logic checks that caller only has exactly 1 vote token in their balance",
            "type": "object",
            "required": [
              "burn"
            ],
            "properties": {
              "burn": {
                "type": "object",
                "properties": {
                  "relayed_from": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Send is a base message to transfer tokens to a contract and trigger an action on the receiving contract.",
            "type": "object",
            "required": [
              "send"
            ],
            "properties": {
              "send": {
                "type": "object",
                "required": [
                  "amount",
                  "contract",
                  "msg"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Uint128"
                  },
                  "contract": {
                    "type": "string"
                  },
                  "msg": {
                    "$ref": "#/definitions/Binary"
                  },
                  "relayed_from": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "If authorized, creates 1 new vote token and adds to the new wallets .",
            "type": "object",
            "required": [
              "mint"
            ],
            "properties": {
              "mint": {
                "type": "object",
                "required": [
                  "new_wallet"
                ],
                "properties": {
                  "new_wallet": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Updates the mint cap of the contract.Authorized by the DAO permission: executed by dao only",
            "type": "object",
            "required": [
              "update_mint_cap"
            ],
            "properties": {
              "update_mint_cap": {
                "type": "object",
                "properties": {
                  "new_mint_cap": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Uint128"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Updates the staking contract address.Authorized by the DAO permission: executed by dao only",
            "type": "object",
            "required": [
              "update_config_addr"
            ],
            "properties": {
              "update_config_addr": {
                "type": "object",
                "required": [
                  "new_addr"
                ],
                "properties": {
                  "new_addr": {
                    "$ref": "#/definitions/UpdateAddrReq"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "If authorized, updates marketing metadata. Setting None/null for any of these will leave it unchanged. Setting Some(\"\") will clear this field on the contract storage permission: executed by dao only",
            "type": "object",
            "required": [
              "update_marketing"
            ],
            "properties": {
              "update_marketing": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "A longer description of the token and it's utility. Designed for tooltips or such",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "marketing": {
                    "description": "The address (if any) who can update this data structure",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "project": {
                    "description": "A URL pointing to the project behind this token.",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "If set as the \"marketing\" role on the contract, upload a new URL, SVG, or PNG for the token",
            "type": "object",
            "required": [
              "upload_logo"
            ],
            "properties": {
              "upload_logo": {
                "$ref": "#/definitions/Logo"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Logo": {
        "description": "This is used for uploading logo data, or setting it in InstantiateData",
        "oneOf": [
          {
            "description": "A reference to an externally hosted logo. Must be a valid HTTP or HTTPS URL.",
            "type": "object",
            "required": [
              "url"
            ],
            "properties": {
              "url": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Logo content stored on the blockchain. Enforce maximum size of 5KB on all variants",
            "type": "object",
            "required": [
              "embedded"
            ],
            "properties": {
              "embedded": {
                "$ref": "#/definitions/EmbeddedLogo"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Receiver": {
        "type": "object",
        "required": [
          "addr",
          "connection_id"
        ],
        "properties": {
          "addr": {
            "type": "string"
          },
          "connection_id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RemoteTunnelPacketMsg": {
        "description": "The IBC Packet Msg allowed dispatched by remote-tunnel",
        "oneOf": [
          {
            "description": "A special case where the Factory is the only one who can call this",
            "type": "object",
            "required": [
              "mint_govec"
            ],
            "properties": {
              "mint_govec": {
                "type": "object",
                "required": [
                  "wallet_addr"
                ],
                "properties": {
                  "wallet_addr": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "govec_actions"
            ],
            "properties": {
              "govec_actions": {
                "$ref": "#/definitions/GovecExecuteMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "stake_actions"
            ],
            "properties": {
              "stake_actions": {
                "$ref": "#/definitions/ExecuteMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "proposal_actions"
            ],
            "properties": {
              "proposal_actions": {
                "type": "object",
                "required": [
                  "msg",
                  "prop_module_addr"
                ],
                "properties": {
                  "msg": {
                    "$ref": "#/definitions/ExecuteMsg"
                  },
                  "prop_module_addr": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "UpdateAddrReq": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "dao"
            ],
            "properties": {
              "dao": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "dao_tunnel"
            ],
            "properties": {
              "dao_tunnel": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "factory"
            ],
            "properties": {
              "factory": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "staking"
            ],
            "properties": {
              "staking": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "proposal"
            ],
            "properties": {
              "proposal": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "dao_config"
        ],
        "properties": {
          "dao_config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "chain_config"
        ],
        "properties": {
          "chain_config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "ibc_transfer_channels"
        ],
        "properties": {
          "ibc_transfer_channels": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "next_job_id"
        ],
        "properties": {
          "next_job_id": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "chain_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChainConfigResponse",
      "type": "object",
      "required": [
        "denom"
      ],
      "properties": {
        "denom": {
          "type": "string"
        },
        "remote_factory": {
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "dao_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DaoConfig",
      "type": "object",
      "required": [
        "addr",
        "connection_id",
        "dao_tunnel_port_id"
      ],
      "properties": {
        "addr": {
          "description": "DAO addr on dao chain",
          "type": "string"
        },
        "connection_id": {
          "description": "The local connection_id that is bounded to the remote chain light client This can be queried by the using the `IbcPacket` when receiving the ibc message IbcPacket.dest.channel_id and IbcPacket.dest.port_id",
          "type": "string"
        },
        "dao_tunnel_channel": {
          "description": "The channel_id to be used to call to the dao-tunnel contract on dao-chain This can be updated by the dao-tunnel forwarding message from the DAO",
          "type": [
            "string",
            "null"
          ]
        },
        "dao_tunnel_port_id": {
          "description": "The src.port_id from the connection This is bounded to the contract address on the remote chain `wasm.<contract_address>`, i.e. the dao-tunnel contract address",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "ibc_transfer_channels": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "IbcTransferChannels",
      "description": "Returned when IBC_TRANSFER_MODULES are queried",
      "type": "object",
      "required": [
        "endpoints"
      ],
      "properties": {
        "endpoints": {
          "description": "(connection_id, channel_id) The channel_id are for channel already established",
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "type": "string"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false
    },
    "next_job_id": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "uint64",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    }
  }
}
