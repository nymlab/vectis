{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "addr_prefix",
    "code_id",
    "create_wallet_msg",
    "multisig_code_id"
  ],
  "properties": {
    "addr_prefix": {
      "description": "Chain address prefix",
      "type": "string"
    },
    "code_id": {
      "description": "Code Id used to instantiate the contract",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "create_wallet_msg": {
      "$ref": "#/definitions/CreateWalletMsg"
    },
    "multisig_code_id": {
      "description": "Fixed Multisig Code Id for guardians",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    }
  },
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "CreateWalletMsg": {
      "type": "object",
      "required": [
        "guardians",
        "label",
        "proxy_initial_funds",
        "relayers",
        "user_pubkey"
      ],
      "properties": {
        "guardians": {
          "$ref": "#/definitions/Guardians"
        },
        "label": {
          "type": "string"
        },
        "proxy_initial_funds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "relayers": {
          "description": "A List of keys can act as relayer for",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user_pubkey": {
          "$ref": "#/definitions/Binary"
        }
      }
    },
    "Guardians": {
      "type": "object",
      "required": [
        "addresses"
      ],
      "properties": {
        "addresses": {
          "description": "A List of keys can act as guardian for",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "guardians_multisig": {
          "description": "Whether multisig option for guardians is enabled",
          "anyOf": [
            {
              "$ref": "#/definitions/MultiSig"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "MultiSig": {
      "type": "object",
      "required": [
        "multisig_initial_funds",
        "threshold_absolute_count"
      ],
      "properties": {
        "multisig_initial_funds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "threshold_absolute_count": {
          "description": "Only Fixed multisig is supported in this version",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
