(function() {var type_impls = {
"vectis_wallet":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Item%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-Item%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; Item&lt;'a, T&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">new</a>(storage_key: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; Item&lt;'a, T&gt;</h4></section></div></details>",0,"vectis_wallet::types::state::ControllerState","vectis_wallet::types::state::Deployer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Item%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-Item%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; Item&lt;'a, T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.193/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> + <a class=\"trait\" href=\"https://docs.rs/serde/1.0.193/serde/de/trait.DeserializeOwned.html\" title=\"trait serde::de::DeserializeOwned\">DeserializeOwned</a>,</span></h3></section></summary><div class=\"impl-items\"><section id=\"method.as_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.save\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">save</a>(&amp;self, store: &amp;mut dyn Storage, data: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, StdError&gt;</h4></section></summary><div class=\"docblock\"><p>save will serialize the model and store, returns an error on serialization issues</p>\n</div></details><section id=\"method.remove\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove</a>(&amp;self, store: &amp;mut dyn Storage)</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">load</a>(&amp;self, store: &amp;dyn Storage) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, StdError&gt;</h4></section></summary><div class=\"docblock\"><p>load will return an error if no data is set at the given key, or on parse error</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.may_load\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">may_load</a>(&amp;self, store: &amp;dyn Storage) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, StdError&gt;</h4></section></summary><div class=\"docblock\"><p>may_load will parse the data stored at the key if present, returns <code>Ok(None)</code> if no data there.\nreturns an error on issues parsing</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.exists\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">exists</a>(&amp;self, store: &amp;dyn Storage) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if data is stored at the key, <code>false</code> otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">update</a>&lt;A, E&gt;(&amp;self, store: &amp;mut dyn Storage, action: A) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<span class=\"where fmt-newline\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;,\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;StdError&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Loads the data, perform the specified action, and store the result\nin the database. This is shorthand for some common sequences, which may be useful.</p>\n<p>It assumes, that data was initialized before, and if it doesn’t exist, <code>Err(StdError::NotFound)</code>\nis returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.query\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">query</a>&lt;Q&gt;(\n    &amp;self,\n    querier: &amp;QuerierWrapper&lt;'_, Q&gt;,\n    remote_contract: Addr\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, StdError&gt;<span class=\"where fmt-newline\">where\n    Q: CustomQuery,</span></h4></section></summary><div class=\"docblock\"><p>If you import the proper Item from the remote contract, this will let you read the data\nfrom a remote contract in a type-safe way using WasmQuery::RawQuery.</p>\n<p>Note that we expect an Item to be set, and error if there is no data there</p>\n</div></details></div></details>",0,"vectis_wallet::types::state::ControllerState","vectis_wallet::types::state::Deployer"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()