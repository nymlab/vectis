(function() {var type_impls = {
"vectis_wallet":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Map%3C'a,+K,+T%3E\" class=\"impl\"><a href=\"#impl-Map%3C'a,+K,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, T&gt; Map&lt;'a, K, T&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">new</a>(namespace: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.str.html\">str</a>) -&gt; Map&lt;'a, K, T&gt;</h4></section><section id=\"method.namespace\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">namespace</a>(&amp;self) -&gt; &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;&#39;a [u8]\">ⓘ</a></h4></section></div></details>",0,"vectis_wallet::types::state::Authenticators","vectis_wallet::types::state::Plugins","vectis_wallet::types::state::Subscribers","vectis_wallet::types::state::SupportedChains","vectis_wallet::types::state::ProxyData","vectis_wallet::types::state::SupportedProxies"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Map%3C'a,+K,+T%3E\" class=\"impl\"><a href=\"#impl-Map%3C'a,+K,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, T&gt; Map&lt;'a, K, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.193/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> + <a class=\"trait\" href=\"https://docs.rs/serde/1.0.193/serde/de/trait.DeserializeOwned.html\" title=\"trait serde::de::DeserializeOwned\">DeserializeOwned</a>,\n    K: PrimaryKey&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.key\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">key</a>(&amp;self, k: K) -&gt; Path&lt;T&gt;</h4></section><section id=\"method.save\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">save</a>(\n    &amp;self,\n    store: &amp;mut dyn Storage,\n    k: K,\n    data: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, StdError&gt;</h4></section><section id=\"method.remove\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove</a>(&amp;self, store: &amp;mut dyn Storage, k: K)</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">load</a>(&amp;self, store: &amp;dyn Storage, k: K) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, StdError&gt;</h4></section></summary><div class=\"docblock\"><p>load will return an error if no data is set at the given key, or on parse error</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.may_load\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">may_load</a>(&amp;self, store: &amp;dyn Storage, k: K) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, StdError&gt;</h4></section></summary><div class=\"docblock\"><p>may_load will parse the data stored at the key if present, returns Ok(None) if no data there.\nreturns an error on issues parsing</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.has\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">has</a>(&amp;self, store: &amp;dyn Storage, k: K) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>has returns true or false if any data is at this key, without parsing or interpreting the\ncontents.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">update</a>&lt;A, E&gt;(\n    &amp;self,\n    store: &amp;mut dyn Storage,\n    k: K,\n    action: A\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;,\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;StdError&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Loads the data, perform the specified action, and store the result\nin the database. This is shorthand for some common sequences, which may be useful.</p>\n<p>If the data exists, <code>action(Some(value))</code> is called. Otherwise <code>action(None)</code> is called.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.query\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">query</a>&lt;Q&gt;(\n    &amp;self,\n    querier: &amp;QuerierWrapper&lt;'_, Q&gt;,\n    remote_contract: Addr,\n    k: K\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, StdError&gt;<div class=\"where\">where\n    Q: CustomQuery,</div></h4></section></summary><div class=\"docblock\"><p>If you import the proper Map from the remote contract, this will let you read the data\nfrom a remote contract in a type-safe way using WasmQuery::RawQuery</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clear</a>(&amp;self, store: &amp;mut dyn Storage)</h4></section></summary><div class=\"docblock\"><p>Clears the map, removing all elements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(&amp;self, store: &amp;dyn Storage) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the map is empty.</p>\n</div></details></div></details>",0,"vectis_wallet::types::state::Authenticators","vectis_wallet::types::state::Plugins","vectis_wallet::types::state::Subscribers","vectis_wallet::types::state::SupportedChains","vectis_wallet::types::state::ProxyData","vectis_wallet::types::state::SupportedProxies"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Map%3C'a,+K,+T%3E\" class=\"impl\"><a href=\"#impl-Map%3C'a,+K,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, T&gt; Map&lt;'a, K, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.193/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> + <a class=\"trait\" href=\"https://docs.rs/serde/1.0.193/serde/de/trait.DeserializeOwned.html\" title=\"trait serde::de::DeserializeOwned\">DeserializeOwned</a>,\n    K: PrimaryKey&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.sub_prefix\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">sub_prefix</a>(\n    &amp;self,\n    p: &lt;K as PrimaryKey&lt;'a&gt;&gt;::SubPrefix\n) -&gt; Prefix&lt;&lt;K as PrimaryKey&lt;'a&gt;&gt;::SuperSuffix, T, &lt;K as PrimaryKey&lt;'a&gt;&gt;::SuperSuffix&gt;</h4></section><section id=\"method.prefix\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">prefix</a>(\n    &amp;self,\n    p: &lt;K as PrimaryKey&lt;'a&gt;&gt;::Prefix\n) -&gt; Prefix&lt;&lt;K as PrimaryKey&lt;'a&gt;&gt;::Suffix, T, &lt;K as PrimaryKey&lt;'a&gt;&gt;::Suffix&gt;</h4></section></div></details>",0,"vectis_wallet::types::state::Authenticators","vectis_wallet::types::state::Plugins","vectis_wallet::types::state::Subscribers","vectis_wallet::types::state::SupportedChains","vectis_wallet::types::state::ProxyData","vectis_wallet::types::state::SupportedProxies"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Map%3C'a,+K,+T%3E\" class=\"impl\"><a href=\"#impl-Map%3C'a,+K,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, T&gt; Map&lt;'a, K, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.193/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> + <a class=\"trait\" href=\"https://docs.rs/serde/1.0.193/serde/de/trait.DeserializeOwned.html\" title=\"trait serde::de::DeserializeOwned\">DeserializeOwned</a>,\n    K: PrimaryKey&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.prefix_range_raw\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">prefix_range_raw</a>&lt;'c&gt;(\n    &amp;self,\n    store: &amp;'c dyn Storage,\n    min: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;PrefixBound&lt;'a, &lt;K as PrimaryKey&lt;'a&gt;&gt;::Prefix&gt;&gt;,\n    max: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;PrefixBound&lt;'a, &lt;K as PrimaryKey&lt;'a&gt;&gt;::Prefix&gt;&gt;,\n    order: Order\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>&gt;, T), StdError&gt;&gt; + 'c&gt;<div class=\"where\">where\n    'a: 'c,\n    T: 'c,</div></h4></section></summary><div class=\"docblock\"><p>While <code>range_raw</code> over a <code>prefix</code> fixes the prefix to one element and iterates over the\nremaining, <code>prefix_range_raw</code> accepts bounds for the lowest and highest elements of the <code>Prefix</code>\nitself, and iterates over those (inclusively or exclusively, depending on <code>PrefixBound</code>).\nThere are some issues that distinguish these two, and blindly casting to <code>Vec&lt;u8&gt;</code> doesn’t\nsolve them.</p>\n</div></details></div></details>",0,"vectis_wallet::types::state::Authenticators","vectis_wallet::types::state::Plugins","vectis_wallet::types::state::Subscribers","vectis_wallet::types::state::SupportedChains","vectis_wallet::types::state::ProxyData","vectis_wallet::types::state::SupportedProxies"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Map%3C'a,+K,+T%3E\" class=\"impl\"><a href=\"#impl-Map%3C'a,+K,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, T&gt; Map&lt;'a, K, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.193/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> + <a class=\"trait\" href=\"https://docs.rs/serde/1.0.193/serde/de/trait.DeserializeOwned.html\" title=\"trait serde::de::DeserializeOwned\">DeserializeOwned</a>,\n    K: PrimaryKey&lt;'a&gt; + KeyDeserialize,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.prefix_range\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">prefix_range</a>&lt;'c&gt;(\n    &amp;self,\n    store: &amp;'c dyn Storage,\n    min: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;PrefixBound&lt;'a, &lt;K as PrimaryKey&lt;'a&gt;&gt;::Prefix&gt;&gt;,\n    max: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;PrefixBound&lt;'a, &lt;K as PrimaryKey&lt;'a&gt;&gt;::Prefix&gt;&gt;,\n    order: Order\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&lt;K as KeyDeserialize&gt;::Output, T), StdError&gt;&gt; + 'c&gt;<div class=\"where\">where\n    'a: 'c,\n    T: 'c,\n    K: 'c,\n    &lt;K as KeyDeserialize&gt;::Output: 'static,</div></h4></section></summary><div class=\"docblock\"><p>While <code>range</code> over a <code>prefix</code> fixes the prefix to one element and iterates over the\nremaining, <code>prefix_range</code> accepts bounds for the lowest and highest elements of the\n<code>Prefix</code> itself, and iterates over those (inclusively or exclusively, depending on\n<code>PrefixBound</code>).\nThere are some issues that distinguish these two, and blindly casting to <code>Vec&lt;u8&gt;</code> doesn’t\nsolve them.</p>\n</div></details></div></details>",0,"vectis_wallet::types::state::Authenticators","vectis_wallet::types::state::Plugins","vectis_wallet::types::state::Subscribers","vectis_wallet::types::state::SupportedChains","vectis_wallet::types::state::ProxyData","vectis_wallet::types::state::SupportedProxies"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Map%3C'a,+K,+T%3E\" class=\"impl\"><a href=\"#impl-Map%3C'a,+K,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, T&gt; Map&lt;'a, K, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.193/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> + <a class=\"trait\" href=\"https://docs.rs/serde/1.0.193/serde/de/trait.DeserializeOwned.html\" title=\"trait serde::de::DeserializeOwned\">DeserializeOwned</a>,\n    K: PrimaryKey&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.range_raw\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">range_raw</a>&lt;'c&gt;(\n    &amp;self,\n    store: &amp;'c dyn Storage,\n    min: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Bound&lt;'a, K&gt;&gt;,\n    max: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Bound&lt;'a, K&gt;&gt;,\n    order: Order\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>&gt;, T), StdError&gt;&gt; + 'c&gt;<div class=\"where\">where\n    T: 'c,</div></h4></section><section id=\"method.keys_raw\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">keys_raw</a>&lt;'c&gt;(\n    &amp;self,\n    store: &amp;'c dyn Storage,\n    min: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Bound&lt;'a, K&gt;&gt;,\n    max: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Bound&lt;'a, K&gt;&gt;,\n    order: Order\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>&gt;&gt; + 'c&gt;<div class=\"where\">where\n    T: 'c,</div></h4></section></div></details>",0,"vectis_wallet::types::state::Authenticators","vectis_wallet::types::state::Plugins","vectis_wallet::types::state::Subscribers","vectis_wallet::types::state::SupportedChains","vectis_wallet::types::state::ProxyData","vectis_wallet::types::state::SupportedProxies"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Map%3C'a,+K,+T%3E\" class=\"impl\"><a href=\"#impl-Map%3C'a,+K,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, T&gt; Map&lt;'a, K, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.193/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> + <a class=\"trait\" href=\"https://docs.rs/serde/1.0.193/serde/de/trait.DeserializeOwned.html\" title=\"trait serde::de::DeserializeOwned\">DeserializeOwned</a>,\n    K: PrimaryKey&lt;'a&gt; + KeyDeserialize,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.range\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">range</a>&lt;'c&gt;(\n    &amp;self,\n    store: &amp;'c dyn Storage,\n    min: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Bound&lt;'a, K&gt;&gt;,\n    max: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Bound&lt;'a, K&gt;&gt;,\n    order: Order\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&lt;K as KeyDeserialize&gt;::Output, T), StdError&gt;&gt; + 'c&gt;<div class=\"where\">where\n    T: 'c,\n    &lt;K as KeyDeserialize&gt;::Output: 'static,</div></h4></section><section id=\"method.keys\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">keys</a>&lt;'c&gt;(\n    &amp;self,\n    store: &amp;'c dyn Storage,\n    min: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Bound&lt;'a, K&gt;&gt;,\n    max: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Bound&lt;'a, K&gt;&gt;,\n    order: Order\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;K as KeyDeserialize&gt;::Output, StdError&gt;&gt; + 'c&gt;<div class=\"where\">where\n    T: 'c,\n    &lt;K as KeyDeserialize&gt;::Output: 'static,</div></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.first\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">first</a>(\n    &amp;self,\n    storage: &amp;dyn Storage\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(&lt;K as KeyDeserialize&gt;::Output, T)&gt;, StdError&gt;<div class=\"where\">where\n    &lt;K as KeyDeserialize&gt;::Output: 'static,</div></h4></section></summary><div class=\"docblock\"><p>Returns the first key-value pair in the map.\nThis is <em>not</em> according to insertion-order, but according to the key ordering.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>MAP: Map&lt;i32, u32&gt; = Map::new(<span class=\"string\">\"map\"</span>);\n\n<span class=\"comment\">// empty map\n</span><span class=\"macro\">assert_eq!</span>(MAP.first(<span class=\"kw-2\">&amp;</span>storage), <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">None</span>));\n\n<span class=\"comment\">// insert entries\n</span>MAP.save(<span class=\"kw-2\">&amp;mut </span>storage, <span class=\"number\">1</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">10</span>).unwrap();\nMAP.save(<span class=\"kw-2\">&amp;mut </span>storage, -<span class=\"number\">2</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">20</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(MAP.first(<span class=\"kw-2\">&amp;</span>storage), <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Some</span>((-<span class=\"number\">2</span>, <span class=\"number\">20</span>))));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.last\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">last</a>(\n    &amp;self,\n    storage: &amp;dyn Storage\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(&lt;K as KeyDeserialize&gt;::Output, T)&gt;, StdError&gt;<div class=\"where\">where\n    &lt;K as KeyDeserialize&gt;::Output: 'static,</div></h4></section></summary><div class=\"docblock\"><p>Returns the last key-value pair in the map.\nThis is <em>not</em> according to insertion-order, but according to the key ordering.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">const </span>MAP: Map&lt;i32, u32&gt; = Map::new(<span class=\"string\">\"map\"</span>);\n\n<span class=\"comment\">// empty map\n</span><span class=\"macro\">assert_eq!</span>(MAP.last(<span class=\"kw-2\">&amp;</span>storage), <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">None</span>));\n\n<span class=\"comment\">// insert entries\n</span>MAP.save(<span class=\"kw-2\">&amp;mut </span>storage, <span class=\"number\">1</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">10</span>).unwrap();\nMAP.save(<span class=\"kw-2\">&amp;mut </span>storage, -<span class=\"number\">2</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">20</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(MAP.last(<span class=\"kw-2\">&amp;</span>storage), <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"number\">10</span>))));</code></pre></div>\n</div></details></div></details>",0,"vectis_wallet::types::state::Authenticators","vectis_wallet::types::state::Plugins","vectis_wallet::types::state::Subscribers","vectis_wallet::types::state::SupportedChains","vectis_wallet::types::state::ProxyData","vectis_wallet::types::state::SupportedProxies"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Map%3C'a,+K,+T%3E\" class=\"impl\"><a href=\"#impl-Clone-for-Map%3C'a,+K,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Map&lt;'a, K, T&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Map&lt;'a, K, T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","vectis_wallet::types::state::Authenticators","vectis_wallet::types::state::Plugins","vectis_wallet::types::state::Subscribers","vectis_wallet::types::state::SupportedChains","vectis_wallet::types::state::ProxyData","vectis_wallet::types::state::SupportedProxies"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Map%3C'a,+K,+T%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Map%3C'a,+K,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Map&lt;'a, K, T&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","vectis_wallet::types::state::Authenticators","vectis_wallet::types::state::Plugins","vectis_wallet::types::state::Subscribers","vectis_wallet::types::state::SupportedChains","vectis_wallet::types::state::ProxyData","vectis_wallet::types::state::SupportedProxies"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()