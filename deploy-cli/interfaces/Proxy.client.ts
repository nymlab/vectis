/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.26.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {
    AuthenticatorProvider,
    AuthenticatorType,
    Binary,
    Addr,
    Uint128,
    InstantiateMsg,
    CreateWalletMsg,
    Entity,
    Authenticator,
    Guardians,
    MultiSig,
    Coin,
    ExecuteMsg,
    CosmosMsgForEmpty,
    BankMsg,
    StakingMsg,
    DistributionMsg,
    IbcMsg,
    Timestamp,
    Uint64,
    WasmMsg,
    GovMsg,
    VoteOption,
    Decimal,
    PluginPermissions,
    PluginSource,
    Empty,
    IbcTimeout,
    IbcTimeoutBlock,
    WeightedVoteOption,
    RelayTransaction,
    GuardiansUpdateMsg,
    PluginParams,
    QueryMsg,
    NullableGuardiansUpdateRequest,
    Expiration,
    GuardiansUpdateRequest,
    Threshold,
    WalletInfo,
    ContractVersion,
    PluginListResponse,
} from "./Proxy.types";
export interface ProxyReadOnlyInterface {
    contractAddress: string;
    info: () => Promise<WalletInfo>;
    guardiansUpdateRequest: () => Promise<NullableGuardiansUpdateRequest>;
    plugins: () => Promise<PluginListResponse>;
}
export class ProxyQueryClient implements ProxyReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;

    constructor(client: CosmWasmClient, contractAddress: string) {
        this.client = client;
        this.contractAddress = contractAddress;
        this.info = this.info.bind(this);
        this.guardiansUpdateRequest = this.guardiansUpdateRequest.bind(this);
        this.plugins = this.plugins.bind(this);
    }

    info = async (): Promise<WalletInfo> => {
        return this.client.queryContractSmart(this.contractAddress, {
            info: {},
        });
    };
    guardiansUpdateRequest = async (): Promise<NullableGuardiansUpdateRequest> => {
        return this.client.queryContractSmart(this.contractAddress, {
            guardians_update_request: {},
        });
    };
    plugins = async (): Promise<PluginListResponse> => {
        return this.client.queryContractSmart(this.contractAddress, {
            plugins: {},
        });
    };
}
export interface ProxyInterface extends ProxyReadOnlyInterface {
    contractAddress: string;
    sender: string;
    execute: (
        {
            msgs,
        }: {
            msgs: CosmosMsgForEmpty[];
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    revertFreezeStatus: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    relay: (
        {
            transaction,
        }: {
            transaction: RelayTransaction;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    rotateControllerKey: (
        {
            newControllerAddress,
        }: {
            newControllerAddress: string;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    requestUpdateGuardians: (
        {
            request,
        }: {
            request?: GuardiansUpdateMsg;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    updateGuardians: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateLabel: (
        {
            newLabel,
        }: {
            newLabel: string;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    instantiatePlugin: (
        {
            instantiateMsg,
            label,
            pluginParams,
            src,
        }: {
            instantiateMsg: Binary;
            label: string;
            pluginParams: PluginParams;
            src: PluginSource;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    updatePlugins: (
        {
            migrateMsg,
            pluginAddr,
            pluginPermissions,
        }: {
            migrateMsg?: number[][];
            pluginAddr: string;
            pluginPermissions?: PluginPermissions[];
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    pluginExecute: (
        {
            msgs,
        }: {
            msgs: CosmosMsgForEmpty[];
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
}
export class ProxyClient extends ProxyQueryClient implements ProxyInterface {
    override client: SigningCosmWasmClient;
    sender: string;
    override contractAddress: string;

    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
        super(client, contractAddress);
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.execute = this.execute.bind(this);
        this.revertFreezeStatus = this.revertFreezeStatus.bind(this);
        this.relay = this.relay.bind(this);
        this.rotateControllerKey = this.rotateControllerKey.bind(this);
        this.requestUpdateGuardians = this.requestUpdateGuardians.bind(this);
        this.updateGuardians = this.updateGuardians.bind(this);
        this.updateLabel = this.updateLabel.bind(this);
        this.instantiatePlugin = this.instantiatePlugin.bind(this);
        this.updatePlugins = this.updatePlugins.bind(this);
        this.pluginExecute = this.pluginExecute.bind(this);
    }

    execute = async (
        {
            msgs,
        }: {
            msgs: CosmosMsgForEmpty[];
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                execute: {
                    msgs,
                },
            },
            fee,
            memo,
            funds
        );
    };
    revertFreezeStatus = async (
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                revert_freeze_status: {},
            },
            fee,
            memo,
            funds
        );
    };
    relay = async (
        {
            transaction,
        }: {
            transaction: RelayTransaction;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                relay: {
                    transaction,
                },
            },
            fee,
            memo,
            funds
        );
    };
    rotateControllerKey = async (
        {
            newControllerAddress,
        }: {
            newControllerAddress: string;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                rotate_controller_key: {
                    new_controller_address: newControllerAddress,
                },
            },
            fee,
            memo,
            funds
        );
    };
    requestUpdateGuardians = async (
        {
            request,
        }: {
            request?: GuardiansUpdateMsg;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                request_update_guardians: {
                    request,
                },
            },
            fee,
            memo,
            funds
        );
    };
    updateGuardians = async (
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                update_guardians: {},
            },
            fee,
            memo,
            funds
        );
    };
    updateLabel = async (
        {
            newLabel,
        }: {
            newLabel: string;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                update_label: {
                    new_label: newLabel,
                },
            },
            fee,
            memo,
            funds
        );
    };
    instantiatePlugin = async (
        {
            instantiateMsg,
            label,
            pluginParams,
            src,
        }: {
            instantiateMsg: Binary;
            label: string;
            pluginParams: PluginParams;
            src: PluginSource;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                instantiate_plugin: {
                    instantiate_msg: instantiateMsg,
                    label,
                    plugin_params: pluginParams,
                    src,
                },
            },
            fee,
            memo,
            funds
        );
    };
    updatePlugins = async (
        {
            migrateMsg,
            pluginAddr,
            pluginPermissions,
        }: {
            migrateMsg?: number[][];
            pluginAddr: string;
            pluginPermissions?: PluginPermissions[];
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                update_plugins: {
                    migrate_msg: migrateMsg,
                    plugin_addr: pluginAddr,
                    plugin_permissions: pluginPermissions,
                },
            },
            fee,
            memo,
            funds
        );
    };
    pluginExecute = async (
        {
            msgs,
        }: {
            msgs: CosmosMsgForEmpty[];
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                plugin_execute: {
                    msgs,
                },
            },
            fee,
            memo,
            funds
        );
    };
}
