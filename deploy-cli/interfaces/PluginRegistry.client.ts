/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.26.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {
    Uint128,
    InstantiateMsg,
    Coin,
    ExecuteMsg,
    ExecMsg,
    Binary,
    QueryMsg,
    QueryMsg1,
    ConfigResponse,
    Fees,
    NullablePlugin,
    CanonicalAddr,
    Plugin,
    VersionDetails,
    PluginsResponse,
    PluginWithVersionResponse,
} from "./PluginRegistry.types";
export interface PluginRegistryReadOnlyInterface {
    contractAddress: string;
    getConfig: () => Promise<ConfigResponse>;
    getPlugins: ({ limit, startAfter }: { limit?: number; startAfter?: number }) => Promise<PluginsResponse>;
    getPluginById: ({ id }: { id: number }) => Promise<NullablePlugin>;
    getFees: () => Promise<Fees>;
    queryPluginByAddress: ({ contractAddr }: { contractAddr: string }) => Promise<PluginWithVersionResponse>;
}
export class PluginRegistryQueryClient implements PluginRegistryReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;

    constructor(client: CosmWasmClient, contractAddress: string) {
        this.client = client;
        this.contractAddress = contractAddress;
        this.getConfig = this.getConfig.bind(this);
        this.getPlugins = this.getPlugins.bind(this);
        this.getPluginById = this.getPluginById.bind(this);
        this.getFees = this.getFees.bind(this);
        this.queryPluginByAddress = this.queryPluginByAddress.bind(this);
    }

    getConfig = async (): Promise<ConfigResponse> => {
        return this.client.queryContractSmart(this.contractAddress, {
            get_config: {},
        });
    };
    getPlugins = async ({ limit, startAfter }: { limit?: number; startAfter?: number }): Promise<PluginsResponse> => {
        return this.client.queryContractSmart(this.contractAddress, {
            get_plugins: {
                limit,
                start_after: startAfter,
            },
        });
    };
    getPluginById = async ({ id }: { id: number }): Promise<NullablePlugin> => {
        return this.client.queryContractSmart(this.contractAddress, {
            get_plugin_by_id: {
                id,
            },
        });
    };
    getFees = async (): Promise<Fees> => {
        return this.client.queryContractSmart(this.contractAddress, {
            get_fees: {},
        });
    };
    queryPluginByAddress = async ({ contractAddr }: { contractAddr: string }): Promise<PluginWithVersionResponse> => {
        return this.client.queryContractSmart(this.contractAddress, {
            query_plugin_by_address: {
                contract_addr: contractAddr,
            },
        });
    };
}
export interface PluginRegistryInterface extends PluginRegistryReadOnlyInterface {
    contractAddress: string;
    sender: string;
    proxyInstallPlugin: (
        {
            id,
            instantiateMsg,
        }: {
            id: number;
            instantiateMsg: Binary;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    registerPlugin: (
        {
            checksum,
            codeId,
            creator,
            ipfsHash,
            name,
            version,
        }: {
            checksum: string;
            codeId: number;
            creator: string;
            ipfsHash: string;
            name: string;
            version: string;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    unregisterPlugin: (
        {
            id,
        }: {
            id: number;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    updatePlugin: (
        {
            checksum,
            codeId,
            creator,
            id,
            ipfsHash,
            version,
        }: {
            checksum?: string;
            codeId?: number;
            creator?: string;
            id: number;
            ipfsHash?: string;
            version: string;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    updateRegistryFee: (
        {
            newFee,
        }: {
            newFee: Coin;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    updateInstallFee: (
        {
            newFee,
        }: {
            newFee: Coin;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
    updateDeployerAddr: (
        {
            newAddr,
        }: {
            newAddr: string;
        },
        fee?: number | StdFee | "auto",
        memo?: string,
        funds?: Coin[]
    ) => Promise<ExecuteResult>;
}
export class PluginRegistryClient extends PluginRegistryQueryClient implements PluginRegistryInterface {
    override client: SigningCosmWasmClient;
    sender: string;
    override contractAddress: string;

    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
        super(client, contractAddress);
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.proxyInstallPlugin = this.proxyInstallPlugin.bind(this);
        this.registerPlugin = this.registerPlugin.bind(this);
        this.unregisterPlugin = this.unregisterPlugin.bind(this);
        this.updatePlugin = this.updatePlugin.bind(this);
        this.updateRegistryFee = this.updateRegistryFee.bind(this);
        this.updateInstallFee = this.updateInstallFee.bind(this);
        this.updateDeployerAddr = this.updateDeployerAddr.bind(this);
    }

    proxyInstallPlugin = async (
        {
            id,
            instantiateMsg,
        }: {
            id: number;
            instantiateMsg: Binary;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                proxy_install_plugin: {
                    id,
                    instantiate_msg: instantiateMsg,
                },
            },
            fee,
            memo,
            funds
        );
    };
    registerPlugin = async (
        {
            checksum,
            codeId,
            creator,
            ipfsHash,
            name,
            version,
        }: {
            checksum: string;
            codeId: number;
            creator: string;
            ipfsHash: string;
            name: string;
            version: string;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                register_plugin: {
                    checksum,
                    code_id: codeId,
                    creator,
                    ipfs_hash: ipfsHash,
                    name,
                    version,
                },
            },
            fee,
            memo,
            funds
        );
    };
    unregisterPlugin = async (
        {
            id,
        }: {
            id: number;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                unregister_plugin: {
                    id,
                },
            },
            fee,
            memo,
            funds
        );
    };
    updatePlugin = async (
        {
            checksum,
            codeId,
            creator,
            id,
            ipfsHash,
            version,
        }: {
            checksum?: string;
            codeId?: number;
            creator?: string;
            id: number;
            ipfsHash?: string;
            version: string;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                update_plugin: {
                    checksum,
                    code_id: codeId,
                    creator,
                    id,
                    ipfs_hash: ipfsHash,
                    version,
                },
            },
            fee,
            memo,
            funds
        );
    };
    updateRegistryFee = async (
        {
            newFee,
        }: {
            newFee: Coin;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                update_registry_fee: {
                    new_fee: newFee,
                },
            },
            fee,
            memo,
            funds
        );
    };
    updateInstallFee = async (
        {
            newFee,
        }: {
            newFee: Coin;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                update_install_fee: {
                    new_fee: newFee,
                },
            },
            fee,
            memo,
            funds
        );
    };
    updateDeployerAddr = async (
        {
            newAddr,
        }: {
            newAddr: string;
        },
        fee: number | StdFee | "auto" = "auto",
        memo?: string,
        funds?: Coin[]
    ): Promise<ExecuteResult> => {
        return await this.client.execute(
            this.sender,
            this.contractAddress,
            {
                update_deployer_addr: {
                    new_addr: newAddr,
                },
            },
            fee,
            memo,
            funds
        );
    };
}
