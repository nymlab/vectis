window.SIDEBAR_ITEMS = {"constant":[["CLAIM_FEE",""],["CONTROLLER_ADDR",""],["CONTROLLER_PRIV",""],["DENOM","This is used for staking queries https://github.com/CosmWasm/cosmwasm/blob/32f308a1a56ae5b8278947891306f7a374c3df94/packages/vm/src/environment.rs#L383"],["GOVEC_CLAIM_DURATION_DAY_MUL","Time allowed for controller to claim their Govec"],["GUARD1",""],["GUARD2",""],["GUARD3",""],["INSTALL_FEE",""],["MINTER_CAP",""],["MINT_AMOUNT",""],["MULTISIG_THRESHOLD",""],["NON_CONTROLLER_PRIV",""],["PROP_APPROVER",""],["REGISTRY_FEE",""],["WALLET_FEE",""]],"derive":[["Derivative",""],["Serialize",""]],"enum":[["ActiveThreshold","The threshold of tokens that must be staked in order for this voting module to be active. If this is not reached, this module will response to `is_active` queries with false and proposal modules which respect active thresholds will not allow the creation of proposals."],["Admin","Information about the CosmWasm level admin of a contract. Used in conjunction with `ModuleInstantiateInfo` to instantiate modules."],["CodeIdType",""],["CosmosMsg",""],["DTunnelExecuteMsg",""],["DaoActors",""],["DaoExecMsg",""],["DaoQueryMsg",""],["Duration","Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined"],["Expiration","Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)"],["FactoryExecuteMsg",""],["FactoryQueryMsg",""],["GovecExecuteMsg",""],["GovecQueryMsg",""],["MultiSigQueryMsg",""],["PRegistryContractError",""],["PRegistryExecMsg",""],["PRegistryQueryMsg",""],["PrePropBaseQueryMsg",""],["PrePropExecExt",""],["PrePropQueryExt",""],["PreProposeInfo",""],["PropQueryMsg",""],["ProposalExecuteMsg",""],["ProposeMessage",""],["ProxyExecuteMsg",""],["ProxyQueryMsg",""],["QueryRequest",""],["RTunnelExecuteMsg",""],["ReceiveMsg",""],["StakeExecuteMsg",""],["StakeQueryMsg",""],["StakingInfo","Information about the staking contract to be used with this voting module."],["StdError","Structured error type for init, execute and query."],["Threshold","The ways a proposal may reach its passing / failing threshold."],["TokenInfo",""],["Vote",""],["VoteQueryMsg",""],["WalletFactoryExecuteMsg",""],["WasmMsg","The message types of the wasm module."],["WasmQuery",""]],"fn":[["coin","A shorthand constructor for Coin"],["contract_dao",""],["contract_dao_tunnel",""],["contract_factory",""],["contract_govec",""],["contract_multisig",""],["contract_plugin_registry",""],["contract_pre_proposal",""],["contract_proposal",""],["contract_proxy",""],["contract_remote_factory",""],["contract_remote_tunnel",""],["contract_stake",""],["contract_vote",""],["dao_execute",""],["dao_instantiate",""],["dao_query",""],["dao_reply",""],["dtunnel_execute",""],["dtunnel_instantiate",""],["dtunnel_query",""],["dtunnel_reply",""],["factory_execute",""],["factory_instantiate",""],["factory_query",""],["factory_reply","reply hooks handles replies from proxy wallet instantiation"],["fixed_multisig_execute",""],["fixed_multisig_instantiate",""],["fixed_multisig_query",""],["govec_execute",""],["govec_instantiate",""],["govec_query",""],["mock_dependencies","Creates all external requirements that can be injected for unit tests."],["preprop_execute",""],["preprop_instantiate",""],["preprop_query",""],["prop_execute",""],["prop_instantiate",""],["prop_query",""],["prop_reply",""],["proxy_exec",""],["proxy_execute",""],["proxy_instantiate",""],["proxy_migrate",""],["proxy_query",""],["proxy_reply",""],["pub_key_to_address","Converts controller pubkey into Addr"],["remote_factory_execute",""],["remote_factory_instantiate",""],["remote_factory_query",""],["remote_factory_reply","reply hooks handles replies from proxy wallet instantiation"],["rtunnel_execute",""],["rtunnel_instantiate",""],["rtunnel_query",""],["rtunnel_reply",""],["stake_execute",""],["stake_instantiate",""],["stake_query",""],["to_binary",""],["vote_execute",""],["vote_instantiate",""],["vote_query",""],["vote_reply",""]],"macro":[["anyhow","Construct an ad-hoc error from a string or existing non-`anyhow` error value."]],"mod":[["sha256","SHA256"]],"struct":[["Addr","A human readable address."],["App","Router is a persisted state. You can query this. Execution generally happens on the RouterCache, which then can be atomically committed or rolled back. We offer .execute() as a wrapper around cache, execute, commit/rollback process."],["AppResponse",""],["BalanceResponse",""],["Binary","Binary is a wrapper around Vec to add base64 de/serialization with serde. It also adds some helper methods to help encode inline."],["BlockInfo",""],["CanonicalAddr","A blockchain address in its binary form."],["Coin",""],["ConfigResponse",""],["ContractWrapper","Wraps the exported functions from a contract and provides the normalized format Place T4 and E4 at the end, as we just want default placeholders for most contracts that don’t have sudo"],["CreateWalletMsg",""],["DTunnelInstanstiateMsg",""],["DaoInstMsg",""],["Empty","An empty struct that serves as a placeholder in different places, such as contracts that don’t set a custom message."],["Event","A full Cosmos SDK event."],["GovecInstantiateMsg",""],["Guardians",""],["GuardiansUpdateMsg","If the `Guardians.guardian_multisig` is given, we will instantiate a new multisig contract. This contract can be an instance of 2 code ids."],["GuardiansUpdateRequest",""],["InstantiateExt",""],["InstantiateMsg",""],["Message","A (hashed) message input to an ECDSA signature"],["ModuleInstantiateInfo","Information needed to instantiate a module."],["MultiSig",""],["PRegistryInstantiateMsg",""],["Plugin",""],["PluginListResponse",""],["PluginParams",""],["PluginRegistry",""],["PluginsResponse",""],["PrePropBaseInstMsg",""],["PropInstMsg",""],["ProposalListResponse","A list of proposals returned by `ListProposals` and `ReverseProposals`."],["ProposalModule","Top level type describing a proposal module."],["ProposalResponse","Information about a proposal returned by proposal queries."],["PublicKey","A Secp256k1 public key, used for verification of signatures"],["RTunnelInstanstiateMsg",""],["RelayTransaction",""],["Secp256k1","The secp256k1 engine, used to execute all signature operations"],["SecretKey","Secret 256-bit key used as `x` in an ECDSA signature"],["SingleChoiceProposeMsg","The contents of a message to create a proposal in the single choice proposal module."],["StakeInstMsg",""],["StakedBalanceAtHeightResponse",""],["Uint128","A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq."],["UncheckedDepositInfo","Information about the deposit required to create a proposal."],["UnclaimedWalletList",""],["VoteInstMsg",""],["VoterListResponse",""]],"trait":[["Contract","Interface to call into a Contract"],["DeserializeOwned","A data structure that can be deserialized without borrowing any data from the deserializer."],["Executor",""],["Serialize","A data structure that can be serialized into any data format supported by Serde."]],"type":[["PrePropExecMsg",""],["PrePropInstMsg",""],["PrePropQueryMsg",""],["Result","`Result<T, Error>`"],["StdResult","The return type for init, execute and query. Since the error type cannot be serialized to JSON, this is only available within the contract and its unit tests."],["ThresholdAbsoluteCount","Declares that a fixed weight of Yes votes is needed to pass. See `ThresholdResponse.AbsoluteCount` in the cw3 spec for details. Only Fixed multisig is supported in this version"]]};